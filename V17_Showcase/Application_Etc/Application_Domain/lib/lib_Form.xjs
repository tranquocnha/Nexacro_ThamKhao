
/************************
 *  공통 Script Include
 ************************/
include "lib::lib_String.xjs"
include "lib::lib_Util.xjs"

/*******************************************************************************
 * Function Name: gfn_FormOnLoad
 * Description	: Form Load 시 공통 기능 처리
 * Arguments	: obj :열린 화면 객체
 * Return 		: None
 ********************************************************************************/
this.gfn_FormOnLoad = function (obj)
{
	// Form에 속한 컨트롤들의 초기화 처리
	this.gfn_AllCallFunction(obj, this.gfn_FormSetInit, true);
}

/*******************************************************************************
 * Function Name: gfn_FormSetInit
 * Description	: Form에 속한 컨트롤들의 초기화 처리
 * Arguments	: obj :객체
 * Return 		: None
 ********************************************************************************/
this.gfn_FormSetInit = function (obj)
{	
	//개발화면의 도메인정보 셋팅
	try{
   	    this.fn_setDomainProperty();
    }catch(e) {}	
	
	this.gfn_setTitle(obj);
}

/*******************************************************************************
 * Function Name: gfn_AllCallFunction
 * Description	: Form에 속한 모든 컴포넌트를 함수의 인자로 넘겨주고 함수 호출처리
 * Arguments	: obj :컨테이너(Form, Div), FunctionObj: 호출함수, bObjects: Invisible object 포함여부, paramObj: 함수에 넘겨줄 파라메터
 * Return 		: retVal
 ********************************************************************************/
this.gfn_AllCallFunction = function (obj, FunctionObj, bObjects, paramObj)
{
	var strType;
	var retVal;

	for (var i = 0; i < obj.components.length; i++) 
	{
		strType = obj.components[i].toString().toUpperCase();

		retVal = FunctionObj.call(this, obj.components[i], paramObj);
		 
		if (this.gfn_isNull(retVal) == false) 
		{
			return retVal;
		}

		if (obj.components[i].components) 
		{
			switch (strType) 
			{
				case "[OBJECT TAB]":
					retVal = this.gfn_AllCallFunction(obj.components[i], FunctionObj, bObjects, paramObj);
					if (this.gfn_isNull(retVal) == false) 
					{
						return retVal;
					}
					break;
				case "[OBJECT TABPAGE]":
				case "[OBJECT DIV]":
				case "[OBJECT POPUPDIV]":
					//if (this.gfn_isNull(obj.components[i].url) == true) 
					//{
						retVal = this.gfn_AllCallFunction(obj.components[i], FunctionObj, bObjects, paramObj);
						if (this.gfn_isNull(retVal) == false) 
						{
							return retVal;
						}
					//}
					break;
			}
		}
	}

	if (bObjects == true && obj.objects) 
	{
		for (var i = 0; i < obj.objects.length; i++) 
		{
			retVal = FunctionObj.call(this, obj.objects[i], paramObj);
			if (this.gfn_isNull(retVal) == false) 
			{
				return retVal;
			}
		}
	}
}

/********************************************************************************
 * Function Name	: gfn_setTitle
 * Description		: 컨트롤의 title을 공통 영역에 정의한 Domain을 바탕으로 변경시키는 함수
 * Arguments		: obj:컨트롤
 * Return 			:
 ********************************************************************************/
this.gfn_setTitle = function (obj)
{
//trace(" @@ gfn_setTitle @@");
	var sText;
	var sCode;

	var strType = obj.toString().toUpperCase();

	switch (strType) 
	{
		case "[OBJECT GRID]":
			for (var i = 0; i < obj.getCellCount("head"); i++) 
			{
				var sCode = obj.getCellProperty('head', i, "text");
				var sText = this.gfn_getDomainText(sCode);
				if (sCode != sText) 
				{
					obj.setCellProperty("head", i, "text", sText);
				}
			}
			break;
		case "[OBJECT DATASET]":
			for (var i = 0; i < obj.getRowCount(); i++) 
			{
				for (var nCol = 0; nCol < obj.getColCount(); nCol++) 
				{
					sCode = obj.getColumn(i, nCol);
					sText = this.gfn_getDomainText(sCode);
					if (sCode != sText) 
					{
						obj.setColumn(i, nCol, sText);
					}
				}
			}
			break;
		case "[OBJECT COMBO]":
		case "[OBJECT RADIO]":
		case "[OBJECT LISTBOX]":
			var rtn = obj.getInnerDataset();			
			if (this.gfn_isNull(rtn)) 
			{
				break;
			}    

				
			if (rtn.toString().toUpperCase() != "[OBJECT DATASET]") 
			{
				break;
			}
			for (var i = 0; i < rtn.getRowCount(); i++) 
			{

				sCode = rtn.getColumn(i, obj.datacolumn);
				//trace("sCode > " + sCode);
				sText = this.gfn_getDomainText(sCode);
				//trace("sText > " + sText);
				if (sCode != sText) 
				{
					rtn.setColumn(i, "datacolumn", sText);
					if(rtn.index == 0 ){
						rtn.set_index(-1);
						rtn.set_index(0);
					}
				}
			}
			break;
		case "[OBJECT EDIT]":
		case "[OBJECT MASKEDIT]":
		case "[OBJECT CALENDAR]":
		case "[OBJECT TEXTAREA]":
			sText = this.gfn_getDomainText(obj.value);
			if (sText != obj.value) 
			{
				obj.set_value(sText);
			}
			break;
		case "[OBJECT FILEUPLOAD]":
			sText = this.gfn_getDomainText(obj.style.buttontext);
			if (sText != obj.style.buttontext) 
			{
				obj.style.set_buttontext(sText);
			}
			break;
		default:
			sText = this.gfn_getDomainText(obj.text);
			if (sText != obj.text) 
			{
				obj.set_text(sText);
			}
			break;
	}
}

/********************************************************************************
 * Function Name: gfn_Alert
 * Description	: 메세지 코드에 따른 실제 메세지값을 찾은 후 팝업창을
 *				  생성해서 해당 값을 보여주는 함수
 * Arguments	: strMsgId(MessageId)
 *				  strMsgType(메세지 종류 : ERR, WARN, INFO)
 *				  msgArr[](메세지값으로 치환될 Parameter Array)
 * Return 		: 팝업에 해당 메세지값을 표현
 ********************************************************************************/
this.gfn_Alert = function (strMsgId, strMsgType, msgArr)
{
	// strMsgType : "default", "error", "question", "warning", "information" (default)

	if (this.gfn_isNull(strMsgType)) 
	{
		strMsgType = "information";
	}

	var strMsg = this.gfn_getDomainText(strMsgId, msgArr);

	this.alert(strMsg, application.gv_MsgTitle, strMsgType);

	return;
}

/********************************************************************************
 * Function Name: gfn_Confirm
 * Description	: 메세지 코드에 따른 실제 메세지값을 찾은 후 팝업창을
 *				  생성해서 해당 값을 보여주는 함수
 * Arguments	: strMsgId(MessageId)
 *				  strMsgType(메세지 종류 : ERR, WARN, INFO)
 *				  msgArr[](메세지값으로 치환될 Parameter Array)
 * Return 		: 팝업에 해당 메세지값을 표현
 ********************************************************************************/
this.gfn_Confirm = function (strMsgId, strMsgType, msgArr)
{
	// strMsgType : "default", "error", "question", "warning", "information" (default)
	if (this.gfn_isNull(strMsgType)) 
	{
		strMsgType = "question";
	}

	var strMsg = this.gfn_getDomainText(strMsgId, msgArr);

	return this.confirm(strMsg, application.gv_MsgTitle, strMsgType);
}
