<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript5.0"><![CDATA[/*
 ===============================================================================
 == data 관련 공통함수들은 여기에 작성한다.
 ===============================================================================
 ● gfn_deleteData    : dataset object에서 키에 해당되는 Row를 찾아서 삭제
 ● gfn_moveData      : dataset object에서 키에 해당되는 Row를 찾아서 이동
 ● gfn_editData      : dataset object에서 키에 해당되는 Row를 찾아서 값을 변경
 ● gfn_insertData    : dataset object에서 신규 Row를 삽입한다.
 ● gfn_addData       : dataset object에서 신규 Row를 추가한다.
 ● gfn_getLookupData : dataSet object에서 키에 해당되는 Row를 찾아서 칼럼값을 전달
 ● gfn_findData      : dataSet object에서 키에 해당되는 Row를 찾아서 rowpostion 전달
 */

//include "lib::lib_Base.xjs"
/**********************************************************************************
 * Function Name: gfn_deleteData
 * Description  : dataset object에서 키에 해당되는 Row를 찾아서 삭제
 * Arguments    : ObjDs:dataset, strIdCol:키칼럼, strId:키값,
 strSubCol:서브키칼럼, strSubId:서브 키값
 * Return       : 없음
 **********************************************************************************/
this.gfn_deleteData = function (ObjDs, strIdCol, strId, strSubCol, strSubId)
{
	var curRow = this.gfn_findData(ObjDs, strIdCol, strId, strSubCol, strSubId);
	ObjDs.deleteRow(curRow);
}

/**********************************************************************************
 * Function Name: gfn_moveData
 * Description  : dataset object에서 키에 해당되는 Row를 찾아서 이동
 * Arguments    : ObjDs:dataset, strIdCol:키칼럼, strId:키값, newRow:이동할 Row,
 strSubCol:서브키칼럼, strSubId:서브 키값
 * Return       : 없음
 **********************************************************************************/
this.gfn_moveData = function (ObjDs, strIdCol, strId, newRow, strSubCol, strSubId)
{
	var curRow = this.gfn_findData(ObjDs, strIdCol, strId, strSubCol, strSubId);
	ObjDs.moveRow(curRow, newRow);
}

/**********************************************************************************
 * Function Name: gfn_editData
 * Description  : dataset object에서 키에 해당되는 Row를 찾아서 값을 변경
 * Arguments    : ObjDs:dataset, strIdCol:키칼럼, strId:키값, valCol:변경할 칼럼, newVal:변경값,
 strSubCol:서브키칼럼, strSubId:서브 키값
 * Return       : 없음
 **********************************************************************************/
this.gfn_editData = function (ObjDs, strIdCol, strId, valCol, newVal, strSubCol, strSubId)
{
	var curRow = this.gfn_findData(ObjDs, strIdCol, strId, strSubCol, strSubId);
	return ObjDs.setColumn(curRow, valCol, newVal);
}

/**********************************************************************************
 * Function Name: gfn_getLookupData
 * Description  : dataSet object에서 키에 해당되는 Row를 찾아서 칼럼값을 전달
 * Arguments    : ObjDs:dataset, strIdCol:키칼럼, strId:키값,  strInfo: dataSet 칼럼,
 strSubCol:서브키칼럼, strSubId:서브 키값
 * Return       : 칼럼값
 **********************************************************************************/
this.gfn_getLookupData = function (ObjDs, strIdCol, strId, strInfo, strSubCol, strSubId)
{
	var strVal;
	var curRow = this.gfn_findData(ObjDs, strIdCol, strId, strSubCol, strSubId);
	if (curRow < 0) 
	{
		return "";
	}
	
	strVal = ObjDs.getColumn(curRow, strInfo);
	if (this.gfn_isNull(strVal)) 
	{
		return "";
	}

	return strVal;
}

/**********************************************************************************
 * Function Name: gfn_findData
 * Description  : dataSet object에서 키에 해당되는 Row를 찾아서 rowpostion 전달
 * Arguments    : ObjDs:dataset, strIdCol:키칼럼, strId:키값,
 strSubCol:서브키칼럼, strSubId:서브 키값
 * Return       : rowpostion
 **********************************************************************************/
this.gfn_findData = function (ObjDs, strIdCol, strId, strSubCol, strSubId)
{
	var arrArgument = this.gfn_findData.arguments;
	
	if (this.gfn_isNull(strSubCol)) 
	{
		
		return ObjDs.findRow(strIdCol, strId);
	}
	
	return ObjDs.findRowExpr(strIdCol + " == '" + strId + "' && " + strSubCol + " == '" + strSubId + "'");
}

/********************************************************************************
 * Function Name	: gfn_DsGetUpdate
 * Description		: dataSet의 Row 중에서 변경된 내용이 있는지 여부를
 *					  판단하는 함수
 * Arguments		: objDs(DataSet)
 * Return 			: true = 변경 된 데이터가 존재
 *					  false = 변경 된 데이터가 없음
 ********************************************************************************/
this.gfn_DsIsUpdated = function (objDs)
{
	if (objDs.getDeletedRowCount() > 0) 
	{
		return true;
	}
	
	if (objDs.findRowExpr("(this.getRowType(rowidx)==4)||(this.getRowType(rowidx)==2)") > 0) 
	{
		return true;
	}
	return false;
}

/********************************************************************************
 * Function Name	: gfn_IsUpdatedRow
 * Description		: dataSet의 Row가 변경되었는지 판단하는 함수()
 * Arguments		: objDs(DataSet), nRow, Column
 * Return 			: true = 변경 된 데이터가 존재
 *					  false = 변경 된 데이터가 없음
 ********************************************************************************/
this.gfn_IsUpdatedRow = function (objDs, nRow)
{
	if (objDs.updatecontrol == true) 
	{
		if (objDs.getRowType(nRow) == 2 || objDs.getRowType(nRow) == 4) 
		{
			return true;
		}
		return false;
	}
	else 
	{
		for (var i = 0; objDs.getColCount(); i++) 
		{
			if (this.gfn_IsUpdateColumn(objDs, nRow, i) == true) 
			{
				return true;
			}
		}
	}
	return false;
}

/********************************************************************************
 * Function Name	: gfn_IsUpdateColumn
 * Description		: dataSet의 Row 에서 해당 칼럼이 변경되었는지
 *					  판단하는 함수
 * Arguments		: objDs(DataSet), nRow, Column
 * Return 			: true = 변경 된 데이터가 존재
 *					  false = 변경 된 데이터가 없음
 ********************************************************************************/
this.gfn_IsUpdateColumn = function (objDs, nRow, Column)
{
	if (objDs.getRowType(nRow) == 2) 
	{
		if (this.gfn_isNull(objDs.getColumn(nRow, Column))) 
		{
			return false;
		}
	}
	else 
	{
		if (objDs.getColumn(nRow, Column) == objDs.getOrgColumn(nRow, Column)) 
		{
			return false;
		}
	}
	return true;
}

/*******************************************************************************
 * Function Name: gfn_AllRowDataCall
 * Description	: Dataset의 모든 행을 함수의 인자로 넘겨주고 함수 호출처리
 * Arguments	: dsObj :Dataset, callFncObj:호출할 함수, bModifiedOnly:변경된 데이터만 호출할지 여부
 * Return 		: retVal
 ********************************************************************************/
this.gfn_AllRowDataCall = function (dsObj, callFncObj, bModifiedOnly)
{
	var retVal;
	for (var i = 0; i < dsObj.getRowCount(); i++) 
	{
		if (bModifiedOnly && !(dsObj.getRowType(i) == 2 || dsObj.getRowType(i) == 4)) 
		{
			continue;
		}
		retVal = callFncObj(dsObj, i);
		if (this.gfn_isNull(retVal) == false) 
		{
			return retVal;
		}
	}
}
]]></Script>
