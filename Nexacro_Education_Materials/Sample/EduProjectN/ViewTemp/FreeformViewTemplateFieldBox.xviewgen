<?xml version="1.0" encoding="utf-8"?>
<ViewTemplateInfo version="1.0">
  <ViewTemplate id="dataViewTemplate" viewtype="Asset" description=""/>
  <Script version="1.0" type="xscript5.1"><![CDATA[/*============================================================================================*
o File Name   : freeformViewTemplate.xviewgen
o Developer   : Kim Dae Won
o Create Date : 2021.04.29
o Description : Free Form View Template
o Version     : 1.0.0.0
*============================================================================================*/

//////////////////////////////상수 설정부 START ////////////////////////////////////////////////////

//필드 디폴트 Width
var FIELD_WIDTH    		  = "100%";

//필드 디폴트 Height
var FIELD_HEIGHT   		  = "40px";

//레이블 디폴트 Width
var LABEL_WIDTH    		  = 100;

//컴포넌트 디폴트 Type
var COMP_TYPE     		  = "edit";

//컴포넌트 Padding
var COMP_PADDING_LEFT     = 5;
var COMP_PADDING_TOP      = 5;
var COMP_PADDING_RIGHT    = 5;
var COMP_PADDING_BOTTOM   = 5;

//컴포넌트 간 사이 간격(좌우측)
var COMP_SPACE     		  = 5;

//컴포넌트 간 사이 간격(상하측)
var LINE_SPACE     		  = 5;

//컴포넌트 디폴트 CSS Class 
var COMP_CSSCLASS		  = "";

//컴포넌트 배경 디폴트 CSS Class
var COMP_BG_CSSCLASS	  = "sta_fieldbox";

//레이블 디폴트 CSS Class
var LABEL_CSSCLASS		  = "sta_labelbox";

//////////////////////////////상수 설정부 END ////////////////////////////////////////////////////

//모델 정보
var oFieldArray;
	
//뷰 컴포넌트 정보
var oContents;
	
//옵션 설정 정보
var oGenerationAttr;

//컴포넌트 ID 목록
var arrCompIds = [];

//컴포넌트 + 바인드 Field 목록
var arrBindItems = [];

/*============================================================================================*
* Parameter Structure Example

1. 'fieldarray' structure example
{
    "modelinfo":
    {
        "serviceid":"model_sample",                                // model service id
        "serviceurl":"http://127.0.0.1:8983/app/addSearchApi.do?"  // model service url
    },
    "fieldcount" : "2",                                            // number of fields in model
    "fields" :
    [
        {                                                          // About the first field
            "id": "company",
            "label": "Company Name",
            "fieldtype": "SelectOne",
            "datatype": "STRING",
            "datasize": "80",
            "editable": "true",
            "uselabel": "true"
        },
        {                                                          // About the second field
            "id": "department",
            "label": "Department Name",
            "fieldtype": "SelectOne",
            "datatype": "STRING",
            "datasize": "80",
            "editable": "true",
            "uselabel": "true"
        } 
    ]
}

2. 'generationattr' structure example
{                                                                  // user-entered attributes for 'view' generation
  "attributes": {
    "use_triggerbutton": "true"
    "triggerbuttontext": "Search"
  }
}

3. 'contents' structure example
// --- design source of xfdl --- //
//   <View id="View00" viewtype="FreeForm" taborder="2" ... >
//     <Layouts>
//       <Layout>
//         <Static id="Static00" text="Company Name" left="0" .../>
//         <Combo id="Combo00" left="85" top="0" .../>
//         <Button id="btn_Trigger" left="617" top="5" .../>
//         ...
//       </Layout>
//     </Layouts>
//     <InitValue>
//       <Combo id="Combo00" enable="true"/>
//     </InitValue>
//     <Objects>
//       <Dataset id="Viewdataset">      
//         <ColumnInfo>      
//           <Column id="company" type="BLOB" size="80"/>      
//           <Column id="department" type="BLOB" size="80"/>      
//         </ColumnInfo>      
//         <Rows>      
//           <Row/>      
//         </Rows>      
//       </Dataset>      
//     </Objects>  
//     <Bind>
//       <BindItem id="item0" compid="Combo00" propid="value" datasetid="viewdataset" columnid="company"/>
//     </Bind>
//     <Script type="xscript5.1"><![CDATA[this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}; ] ]></Script>
//   </View>
    
// --- design source converted to json format --- //
{
    "View": {                                                     // <View id="View00" viewtype="FreeForm" taborder="2" ... />
        "tag": "View",
        "referenceinfo": {
            "realwidth": "500",                                   // Real width of view component
            "realheight": "250"                                   // Real height of view component
        },
        "attribute": {
            "id": "View00",                                       // 'ID' of view component
            "viewtype": "FreeForm",                               // 'viewtype' property value of view component
            "taborder": "2",                                      // 'taborder' property value of view component
            "text": "search view",                                // 'text' property value of view component
            "left": "0",                                          // 'left' property value of view component
            "top": "0",                                           // 'top' property value of view component
            "width": "100%",                                      // 'width' property value of view component
            "height": "50%"                                       // 'height' property value of view component
        },
        "Model": [                                                // Information of components generated by each model field information.
            {                                                     // "fieldid" : "value" => The component generated by the field of Model
                "fieldid": "company",                             // "fieldid" : ""      => The component generated without the field of Model
                "Components": [                                   // The component information generated by the 'company' field.
                    {                                             //   <Static id="Static00" text="Company Name" left="0" .../>
                        "tag": "Static",
                        "attribute": {
                            "id": "Static00",
                            "text": "Company Name",
                            "left": "0",
                            "top": "0",
                            "width": "80",
                            "height": "20",
                        }
                    },
                    {                                             //   <Combo id="Combo00" left="85" top="0" .../>
                        "tag": "Combo",
                        "attribute": {
                            "id": "Combo00",
                            "left": "85",
                            "top": "0",
                            "width": "100",
                            "height": "24",
                        }
                    }
                ]
            },
            {   // with field
                "fieldid": "department",                          // "fieldid" : "value" => The component generated by the field of Model
                "Components": [
                ...
                ]
            },
            {
                "fieldid": "",                                    // "fieldid" : ""      => The component generated without the field of Model
                "Components": [
                    {                                             //   <Button id="btn_Trigger" left="617" top="5" .../>
                        "tag": "Button",
                        "attribute": {
                          "id": "btn_Trigger",
                          "left": "617",
                          "top": "5",
                          "width": "70",
                          "height": "50",
                          "text": "Search"
                        }
                    }
                ]
            }
        ],
        "InitValue": [
          {                                                       //   <InitValue>
            "tag": "InitValue",                                   //     <Combo id="Combo00" enable="true"/>
            "InitValue": [                                        //   </InitValue>
              {
                "tag": "Combo",
                "attribute": {
                  "id": "Combo00",
                  "enable": "true"
                }
              }
            ]
          }
        ],
        "Objects": [
          {                                                       //   <Objects>
            "tag": "Objects",                                     //     <Dataset id="Viewdataset">
            "Objects": [                                          //       <ColumnInfo>
              {                                                   //         <Column id="company" type="BLOB" size="80"/>
                "tag": "Dataset",                                 //         <Column id="department" type="BLOB" size="80"/>
                "attribute": {                                    //       </ColumnInfo>
                  "id": "viewdataset"                             //       <Rows>
                },                                                //         <Row/>
                "Dataset": [                                      //       </Rows>
                  {                                               //     </Dataset>
                    "tag": "ColumnInfo",                          //   </Objects>
                    "ColumnInfo": [
                      {
                        "tag": "Column",
                        "attribute": {
                          "id": "company",
                          "type": "BLOB",
                          "size": "80"
                        }
                      },
                      {
                        "tag": "Column",
                        "attribute": {
                          "id": "department",
                          "type": "BLOB",
                          "size": "80"
                        }
                      }
                    ]
                  },
                  {
                    "tag": "Rows",
                    "Rows": [
                      {
                        "tag": "Row"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "Bind": [
        {                                                         //   <Bind>
          "tag": "Bind",                                          //     <BindItem id="item0" compid="Combo00" propid="value" datasetid="viewdataset" columnid="company"/>
          "Bind": [                                               //   </Bind>
              {
                "tag": "BindItem",
                "attribute": {
                  "id": "item0",
                  "compid": "Combo00",
                  "propid": "value",
                  "datasetid": "viewdataset",
                  "columnid": "company"
                }
              }
            ]
          }
        ],
        "Script": {                                               // <Script type="xscript5.1"><![CDATA[this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}; ] ]></Script>
            "tag": "Script",
            "attribute": {
                "type": "xscript5.1"
            },
            "value": "this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}"
        }
    }
}
*============================================================================================*/

/*---------------------------------------------------------------------------------------------*
 * Function    : fn_GetViewGenerationResult
 * Parameter   : 
 *               - fieldarray     : model field list
 *               - contents       : old contents (include <View>)
 *               - generationattr : attributes for view generation
 * Return      : View contents (source + script) (JSON format)
                 ex) {
                        "View": {
                            "tag": "View",
                            "attribute": {
                                "id": "View00",
                                "viewtype": "FreeForm",
                                "taborder": "2",
                                "text": "search view",
                                "left": "0",
                                ...
                            },
                            "Model": [
                                {   // with field
                                    "fieldid": "department",
                                    "Components": [
                                    ...
                                    ]
                                },
                                {   // without field
                                    "fieldid": "",
                                    "Components": [
                                    ...
                                    ]
                                }
                            ],
                            "InitValue": [
                            ],
                            "Objects": [
                            ],
                            "Bind": [
                            ],
                            "Script": {
                                "tag": "Script",
                                "attribute": {
                                },
                                "value": ""
                            }
                        }
                    }
 * Description : Generate the view based on the model field and return the results.
 *---------------------------------------------------------------------------------------------*
 *                            !!! This is a required function. !!!                             *
 *                            !!! Do not delete it. !!!                                        *
 *---------------------------------------------------------------------------------------------*/
fn_GetViewGenerationResult = function(fieldarray, contents, generationattr) {

	//리턴 값
    var vResult = "";
			
    //trace(">> fieldarray : " + fieldarray);
	//trace(">> contents : " + contents);
    //trace(">> generationattr : " + generationattr);
      
    //모델정보를 JSON 오브젝트로 설정
    if(fieldarray)oFieldArray = JSON.parse(fieldarray);
    
	//뷰 컴포넌트 정보를 JSON 오브젝트로 설정
    if(contents)oContents = JSON.parse(contents);
    
	//옵션 설정 정보를 JSON 오브젝트로 설정
    if(generationattr)oGenerationAttr = JSON.parse(generationattr);
    
	//모델정보 초기화
	oContents.View.Model = [];
	
	//모델정보 생성 함수 호출
	fn_GetModel();
	
	//InitValue 정보 생성 함수 호출
    oContents.View.InitValue = fn_GetInitValue();
	
	//Object 정보 생성 함수 호출
    oContents.View.Objects = fn_GetObjects();
	
	//BindInfo 정보 생성 함수 호출
    oContents.View.Bind = fn_GetBind();
	
	//Script 정보 생성 함수 호출
    oContents.View.Script = fn_GetScript();
    
	//뷰 컴포넌트 정보를 String으로 변환
    vResult = JSON.stringify(oContents, null, "\t");
    
    //trace(">> vResult : " + vResult);
    //뷰 컴포넌트 정보 리턴
    return vResult;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetViewAttributeList
 * Return       : View generation attribute list (JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description : Obtain a list of custom attributes required for view generation
 *---------------------------------------------------------------------------------------------*/
fn_GetViewAttributeList = function() {

    var strJson = "";
    var oJson = {
                        "attributecount": "4",
                        "attributes": [
                            {
                                "id": "direction",
                                "edittype": "Enum",
                                "defaultvalue": "horizontal",
								"enumlist" : ["horizontal", "vertical"],
                                "description": "필드의 생성 방향을 설정합니다."
                            },
							{
                                "id": "halign",
                                "edittype": "Enum",
                                "defaultvalue": "left",
								"enumlist" : ["left", "center", "right"],
                                "description": "필드의 수평 정렬방식을 설정합니다."
                            },
							{
                                "id": "valign",
                                "edittype": "Enum",
                                "defaultvalue": "top",
								"enumlist" : ["top", "middle", "bottom"],
                                "description": "필드의 수직 정렬방식을 설정합니다."
                            },
							{
                                "id": "format",
                                "edittype": "layout",
								"defaultvalue": "",
								"description": "View Layout을 설정합니다."
                                
                            }
                        ]
                  };
				  
	strJson = JSON.stringify(oJson, null, "\t");
    return strJson;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetFieldUserAttributeList
 * Return       : user attribute list from model field(JSON format)
                  ex)   {
                        "attributecount": "2",
                        "attributes": [
                           {
                                "id": "use_triggerbutton",
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "true",
                                "description": "Specifies whether trigger button is auto-created or not"
                            },
                            {
                                "id": "triggerbuttontext",
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList
                                "defaultvalue": "Search",
                                "description": "Enter text for trigger button"
                            }
                        ]
                    }
 * Description  : Obtain a list of user attributes to register in model field
 *---------------------------------------------------------------------------------------------*/
fn_GetFieldUserAttributeList = function ()
{
    var strJson = "";
    
    // TODO : Write a code that predefines the list of user attributes for adding to the model field.
     var oJson = {
                        "attributecount": "6",
                        "attributes": [
                            {
                                "id": "comptype",
                                "edittype": "Enum",
								"enumlist" : ["button", "combo", "edit", "maskedit", "textarea", "static", "radio", "checkbox", "spin", "calendar", "imageviewer", "progressbar"],
                                "defaultvalue": COMP_TYPE,
                                "description": "표현할 컴포넌트 종류"
                            },
							{
                                "id": "fieldwidth",
                                "edittype": "String",
								"defaultvalue": FIELD_WIDTH,
                                "description": "Field Width(px or %)"
                            },
							{
                                "id": "fieldheight",
                                "edittype": "String",
								"defaultvalue": FIELD_HEIGHT,
                                "description": "Field Height(px or %)"
                            },
							{
                                "id": "labelwidth",
                                "edittype": "Number",
								"defaultvalue": LABEL_WIDTH,
                                "description": "Label Width(px)"
                            },
							{
                                "id": "cssclass",
                                "edittype": "String",
								"defaultvalue": COMP_CSSCLASS,
                                "description": "컴포넌트 CSS Class"
                            },
							{
                                "id": "labelcssclass",
                                "edittype": "String",
								"defaultvalue": LABEL_CSSCLASS,
                                "description": "Label CSS Class"
                            }
                        ]
                  };
				  
	strJson = JSON.stringify(oJson, null, "\t");
    return strJson;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetModel
 * Parameter    : 
 * Return       : 
 * Description  : 모델 정보 생성 함수
 *---------------------------------------------------------------------------------------------*/
fn_GetModel = function(){
 
	//View Component Width 값 가져오기
	var nViewCompWidth = oContents.View.referenceinfo.realwidth;
	
	//View Component Height 값 가져오기
	var nViewCompHeight = oContents.View.referenceinfo.realheight;
	
	//format 속성이 설정되어있을 경우 Layout 룰에 따라 컴포넌트 생성
	if(oGenerationAttr.attributes.format)
	{
		//Layout 정보 가져오기
		var oLayout = oGenerationAttr.attributes.format;
		
		//Layout 계산 함수 호출
		fn_CalcLayout(oLayout, nViewCompWidth, nViewCompHeight);
		
		//Layout 기반 컴포넌트 생성 함수 호출
		fn_MakeCompByLayout(oLayout);
		
	}
	//format 속성이 설정되어있지 않을 경우 기본룰에 따라 컴포넌트 생성
	else
	{
		//Field 정보 가져오기
		var arrFieldList = oFieldArray.fields;
		
		//컴포넌트 생성 방향 정보 가져오기
		var sDirection = oGenerationAttr.attributes.direction;
		
		//컴포넌트 수평 정렬방식 정보 가져오기
		var sHAlign = oGenerationAttr.attributes.halign;
		
		//컴포넌트 수직 정렬방식 정보 가져오기
		var sVAlign = oGenerationAttr.attributes.valign;
		
		//컴포넌트 위치 계산함수 호출
		var arrFieldPosition = fn_CalcField(sDirection, sVAlign, sHAlign, nViewCompWidth, nViewCompHeight);
		
		//컴포넌트 생성 함수 호출
		fn_MakeComp(0, 0, nViewCompWidth, nViewCompHeight, sDirection, arrFieldPosition, false, true);
	}
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_CalcLayout
 * Parameter    : obj
 * Return       : 
				- oLayout : 레이아웃 설정 정보
				- nViewCompWidth : View Component Real Width
				- nViewCompHeight : View Component Real Height
 * Description  : Layout 계산 함수
 *---------------------------------------------------------------------------------------------*/
fn_CalcLayout = function(oLayout, nViewCompWidth, nViewCompHeight)
{
	//레이아웃에 설정된 CellList 정보
	var arrCellList = oLayout.celllist;
	
	//레이아웃에 설정된 ColumnSize 정도
	var arrColSize = oLayout.columnsize;
	
	//레이아웃에 설정된 RowSize 정보
	var arrRowSize = oLayout.rowsize;

	//CellList 갯수
	var nCellCnt = arrCellList.length;

	//-1로 설정되지 않은 Column/Row의 사이즈의 합
	var nAllColSize = 0;
	var nAllRowSize = 0;
	
	//Column/Row 사이즈가 -1로 설정된 갯수
	var nNoColSizeCnt = 0;
	var nNoRowSizeCnt = 0;
	
	//Column/Row 사이즈가 -1일 경우 대체할 사이즈
	var nColSizeDef = 0;
	var nRowSizeDef = 0 ;
	
	var oCell;
	var sDirection, sVAlign, sHAlign;
	var nCol, nRow, nColSpan, nRowSpan;
	var nColSize, nRowSize;
	
	var nFieldWidth;
	var nFieldWidthType;
	var nFiledWidthMax;
	var nFieldHeight;
	var nFieldHeightType;
	var nFieldHeightMax;
	
	//-1로 설정되지 않은 Column의 사이즈의 합 구하기
	nAllColSize = arrColSize.reduce(function (pre, value){
		if(value==-1)return pre;
		else return pre + value;
	});
	
	//-1로 설정되지 않은 Row의 사이즈의 합 구하기
	nAllRowSize = arrRowSize.reduce(function (pre, value){
		if(value==-1)return pre;
		else return pre + value;
	});
	
	if(nAllColSize==-1)nAllColSize = 0;
	
	if(nAllRowSize==-1)nAllRowSize = 0;
	
	//-1로 설정된 Column/Row의 갯수 구하기
	nNoColSizeCnt = arrColSize.filter(arrColSize=>arrColSize==-1).length;
	nNoRowSizeCnt = arrRowSize.filter(arrRowSize=>arrRowSize==-1).length;
	
	//-1로 설정된 Column/Row이 존재할 경우
	//(View Component 사이즈 - (-1로 설정되지 않은 Column/Row 사이즈 합)) / -1로 설정된 Column/Row의 갯수
	if(nNoColSizeCnt>0)nColSizeDef = (nViewCompWidth - nAllColSize)/nNoColSizeCnt;
	if(nNoRowSizeCnt>0)nRowSizeDef = (nViewCompHeight - nAllRowSize)/nNoRowSizeCnt;
	
	//레이아웃에 Column/Row 디폴트 사이즈 저장
	oLayout.colsizedef = nColSizeDef;
	oLayout.rowsizedef = nRowSizeDef;
	
	//각 Cell별 필드의 위치값 구하기
	for(var i=0;i<nCellCnt;i++)
	{
		//Cell에 설정된 정보 가져오기
		oCell = arrCellList[i];
		sDirection = oCell.direction;
		sVAlign = oCell.valign;
		sHAlign = oCell.halign;
		nCol = nexacro.toNumber(oCell.col);
		nRow = nexacro.toNumber(oCell.row);
		nColSpan = nexacro.toNumber(oCell.colspan);
		nRowSpan = nexacro.toNumber(oCell.rowspan);
		
		//Col/RowSpan 값이 없을 경우 1로 초기화
		if(!nColSpan)nColSpan = 1;
		if(!nRowSpan)nRowSpan = 1;
		
		//해당 Cell의 Width/Height 구하기
		nColSize = fn_GetCellSize(oLayout.columnsize, nCol, nColSpan, nColSizeDef);
		nRowSize = fn_GetCellSize(oLayout.rowsize, nRow, nRowSpan, nRowSizeDef);
		
		//해당 Cell에 Width/Height 값 저장
		oCell.realcolsize = nColSize;
		oCell.realrowsize = nRowSize;
		
		//해당 Cell에 연결된 필드가 존재할 경우
		if(oCell.fieldlist)
		{
			//해당 Cell에 표현할 Field의 위치값 구하기
			oCell.fieldposition = fn_CalcFieldByLayout(sDirection, sVAlign, sHAlign, nColSize, nRowSize, oCell.fieldlist);
		}
	}
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_CalcFieldByLayout
 * Parameter    : 
				- sDirection : 컴포넌트 생성 방향
				- sVAlign : 컴포넌트 수직 정렬 방식(top|middle|bottom)
				- sHAlign : 컴포넌트 수평 정렬 방식(left|center|right)
				- nColSize : 표현할 Cell의 Width
				- nRowSize : 표현할 Cell의 Height
				- arrFieldInCellList : Cell에 추가된 Field List
 * Return       : arrFieldPosition : Field의 위치정보가 담긴 Object Array
 * Description  : 표현될 Field의 위치값을 구하는 함수
 *---------------------------------------------------------------------------------------------*/
fn_CalcFieldByLayout = function(sDirection, sVAlign, sHAlign, nColSize, nRowSize, arrFieldInCellList)
{
	var nLeft = 0;
	var nTop = 0;
	var nRowIdx = 0;
	var nColIdx = 0;
	var nFiledWidthMax = 0;
	var nFiledHeightMax = 0;
	
	var nStartX, nStartY;
	var nEndX, nEndX;
	var nTemp;
	
	//Model에 등록된 Field 리스트 가져오기
	var arrFieldList = oFieldArray.fields;
	
	//Cell에 연결된 필드의 갯수
	var nFieldInCellCnt;
	
	//Field의 위치정보를 저장할 Object Array
	var arrFieldPosition = [];
		
	//레이블 영역을 뺀 Col Size
	var nRealColSize;
	
	//레이블 Width
	var nLabelWidth;
	
	//Cell에 연결된 Field 리스트로 갯수 확인
	var nFieldInCellCnt = arrFieldInCellList.length;
		
	//컴포넌트의 생성방향이 Horizontal일 경우
	//각 행별 X좌표가 달라지므로 Array로
	//각 열별 Y좌표는 같으므로 Number로
	if(sDirection=="horizontal")
	{
		var arrAlignX = [];
		var nAlignY;
	}
	//컴포넌트의 생성방향이 Vertical일 경우
	//각 행별 X좌표는 같으므로 Number로
	//각 열별 Y좌표가 달라지므로 Array로
	else
	{
		var nAlignX;
		var arrAlignY = [];
	}
	
	for(var j=0;j<nFieldInCellCnt;j++)
	{
		//Cell에 연결된 Field를 기준으로 Model에 등록된 Field정보 가져오기
		sFieldId =  arrFieldInCellList[j];
		oField = arrFieldList.filter(arrFieldList=>arrFieldList.id==sFieldId)[0];
		
		//첫번째 Field에 설정된 레이블 Width 정보 가져오기
		if(j==0)nLabelWidth = nexacro.toNumber(oField.labelwidth);
		
		//레이블 영역을 뺀 Col Size 구하기
		nRealColSize = nColSize - nLabelWidth;
		
		//해당 필드가 표현될 Width/Height값 구하기
		nFieldWidth = fn_GetRealSize(oField.fieldwidth, nRealColSize, FIELD_WIDTH);
		nFieldHeight = fn_GetRealSize(oField.fieldheight, nRowSize, FIELD_HEIGHT);
		
		//컴포넌트의 생성방향이 Horizontal일 경우
		if(sDirection=="horizontal")
		{
		
			//Padding에서 Comp/Line Space로 변환 과정에서 발생하는 차이를 계산
			if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Col", nColIdx+1, nColIdx, true);
			else nTemp = 0;
			
			//Cell의 Width를 초과하는 Field일 경우 줄바꿈 처리
			if(nLeft+nFieldWidth-nTemp>nRealColSize)
			{
				//현재 Row의 마지막에 위치한 Field의 Right값 
				nEndX = nLeft;
				
				//Padding에서 Comp/Line Space로 변환 과정에서 발생하는 차이를 계산
				if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Col", nColIdx, nColIdx-1, true);
				else nTemp = 0;
				
				//현재 Row의 HAlign 시작위치값 구하기
				arrAlignX[nRowIdx] = fn_CalcAlignPos(sHAlign, nRealColSize, (nEndX - nStartX - nTemp));
				
				//다음Row의 시작 Left/Top 좌표값 만들기
				//현재Row의 Height가 가장 큰 Field의 Bottom값을 다음Row의 Top값으로 설정
				nTop += nFiledHeightMax;
				
				//Left좌표 초기화
				nLeft = 0;
				
				//가장 큰 Height값 초기화
				nFiledHeightMax = 0;
				
				//Col Index 초기화
				nColIdx = 0;
				
				//Row Index 증가
				nRowIdx++;
			}
			
			//가장 큰 Height값 구하기
			if(nFieldHeight>nFiledHeightMax)nFiledHeightMax = nFieldHeight;
		}
		//컴포넌트의 생성방향이 Vertical일 경우
		else
		{
			//Padding에서 Comp/Line Space로 변환 과정에서 발생하는 차이를 계산
			if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Row", nColIdx+1, nColIdx, true);
			else nTemp = 0;
			
			//Cell의 Height를 초과하는 Field일 경우 줄바꿈 처리
			if(nTop+nFieldHeight-nTemp>nRowSize)
			{
				//현재 Row의 마지막에 위치한 Field의 Bottom값
				nEndY = nTop;
				
				//Padding에서 Comp/Line Space로 변환 과정에서 발생하는 차이를 계산
				if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Row", nColIdx, nColIdx-1, true);
				else nTemp = 0;
				
				//현재 Row의 VAlign 시작위치값 구하기
				arrAlignY[nRowIdx] = fn_CalcAlignPos(sVAlign, nRowSize, ( nEndY - nStartY - nTemp));
				
				//다음Row의 시작 Left/Top 좌표값 만들기
				//현재Row의 Width가 가장 큰 Field의 Right값을 다음Row의 Left값으로 설정
				nLeft += nFiledWidthMax;
				
				//Top 좌표 초기화
				nTop = 0;
				
				//가장 큰 Width값 초기화
				nFiledWidthMax = 0;
				
				//Col Index 초기화
				nColIdx = 0;
				
				//Row Index 증가
				nRowIdx++;
			}
			
			//가장 큰 Width값 구하기
			if(nFieldWidth>nFiledWidthMax)nFiledWidthMax = nFieldWidth;
		}
		
		//Field의 시작 Left/Top 위치값
		if(j==0)
		{
			nStartX = nLeft;
			nStartY = nTop;
		}
		
		//마지막 Field일 경우
		if(j==nFieldInCellCnt-1)
		{
			//컴포넌트의 생성방향이 Horizontal일 경우
			if(sDirection=="horizontal")
			{
				//현재 Row의 마지막에 위치한 Field의 Right값 
				nEndX = nLeft + nFieldWidth;
				
				//Padding에서 Comp/Line Space로 변환 과정에서 발생하는 차이를 계산
				if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Col", nColIdx+1, nColIdx, true);
				else nTemp = 0;
				
				//현재 Row의 HAlign 시작 위치값 구하기
				arrAlignX[nRowIdx] = fn_CalcAlignPos(sHAlign, nRealColSize, (nEndX - nStartX - nTemp));
				
				//마지막에 위치한 Field까지의 가장 큰 Height를 가진 Field의 Bottom값 
				nEndY = nTop + nFiledHeightMax;
				
				//Padding에서 Comp/Line Space로 변환 과정에서 발생하는 차이를 계산
				if(nRowIdx!=0)nTemp = fn_CalcPaddingToSpace("Row", nRowIdx+1, nRowIdx);
				else nTemp = 0;
				
				//VAlign의 시작 위치값 구하기
				nAlignY = fn_CalcAlignPos(sVAlign, nRowSize, (nEndY - nStartY - nTemp));
			}
			//컴포넌트의 생성방향이 Vertical일 경우
			else
			{
				//현재 Row의 마지막에 위치한 Field의 Bottom값 
				nEndY = nTop + nFieldHeight;
				
				//Padding에서 Comp/Line Space로 변환 과정에서 발생하는 차이를 계산
				if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Row", nColIdx+1, nColIdx);
				else nTemp = 0;
				
				//현재 Row의 HAlign 시작 위치값 구하기
				arrAlignY[nRowIdx] = fn_CalcAlignPos(sVAlign, nRowSize, (nEndY - nStartY - nTemp));
				
				//마지막에 위치한 Field까지의 가장 큰 Width를 가진 Field의 Right값 
				nEndX = nLeft + nFiledWidthMax;
				
				//Padding에서 Comp/Line Space로 변환 과정에서 발생하는 차이를 계산
				if(nRowIdx!=0)nTemp = fn_CalcPaddingToSpace("Col", nRowIdx+1, nRowIdx);
				else nTemp = 0;
				
				//HAlign의 시작 위치값 구하기
				nAlignX = fn_CalcAlignPos(sHAlign, nRealColSize, (nEndX - nStartX - nTemp));
				
			}
		}
		
		//Field의 위치정보 저장
		arrFieldPosition[j] = 
		{
			"fieldid" : sFieldId,
			"left" : nLeft,
			"top" : nTop,
			"width" : nFieldWidth,
			"height" : nFieldHeight,
			"rowidx" : nRowIdx,
			"colidx" : nColIdx,
			"alignx" : 0,
			"aligny" : 0
		};
		
		//다음 Field의 Left/Top 위치값 설정
		if(sDirection=="horizontal")nLeft += nFieldWidth;
		else nTop += nFieldHeight;
		
		//Col Index 증가
		nColIdx++;
	}
	
	//Field의 위치정보에 Align X/Y 값 저장
	if(sDirection=="horizontal")
	{
		for(var i=0;i<arrFieldPosition.length;i++)
		{
			nRowIdx = arrFieldPosition[i].rowidx;
			arrFieldPosition[i].alignx = arrAlignX[nRowIdx];
			arrFieldPosition[i].aligny = nAlignY;
		}
	}else
	{
		for(var i=0;i<arrFieldPosition.length;i++)
		{
			nRowIdx = arrFieldPosition[i].rowidx;
			arrFieldPosition[i].alignx = nAlignX;
			arrFieldPosition[i].aligny = arrAlignY[nRowIdx];
		}
	}
	
	//Field의 위치정보 리턴
	return arrFieldPosition;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_CalcField
 * Parameter    : 
				- sDirection : 컴포넌트 생성 방향
				- sVAlign : 컴포넌트 수직 정렬 방식(top|middle|bottom)
				- sHAlign : 컴포넌트 수평 정렬 방식(left|center|right)
				- nColSize : 표현할 Cell의 Width
				- nRowSize : 표현할 Cell의 Height
 * Return       : arrFieldPosition : Field의 위치정보가 담긴 Object Array
 * Description  : 표현될 Field의 위치값을 구하는 함수
 *---------------------------------------------------------------------------------------------*/
fn_CalcField = function(sDirection, sVAlign, sHAlign, nColSize, nRowSize)
{
	var nLeft = 0;
	var nTop = 0;
	var nRowIdx = 0;
	var nColIdx = 0;
	var nFiledWidthMax = 0;
	var nFiledHeightMax = 0;
	
	var nStartX, nStartY;
	var nEndX, nEndX;
	var nTemp;
	
	//Model에 등록된 Field 리스트 가져오기
	var arrFieldList = oFieldArray.fields;
	
	//Cell에 연결된 필드의 갯수
	var nFieldInCellCnt;
	
	//Field의 위치정보를 저장할 Object Array
	var arrFieldPosition = [];
	
	//레이블 영역을 뺀 Col Size
	var nRealColSize;
	
	//레이블 Width
	var nLabelWidth;
	
	//모델에 등록된 Field 리스트의 갯수로 확인
	var nFieldInCellCnt = arrFieldList.length;
	
	//컴포넌트의 생성방향이 Horizontal일 경우
	//각 행별 X좌표가 달라지므로 Array로
	//각 열별 Y좌표는 같으므로 Number로
	if(sDirection=="horizontal")
	{
		var arrAlignX = [];
		var nAlignY;
	}
	//컴포넌트의 생성방향이 Vertical일 경우
	//각 행별 X좌표는 같으므로 Number로
	//각 열별 Y좌표가 달라지므로 Array로
	else
	{
		var nAlignX;
		var arrAlignY = [];
	}
	
	for(var j=0;j<nFieldInCellCnt;j++)
	{
		//Model에 등록된 Field정보 가져오기
		oField = arrFieldList[j];
		sFieldId = oField.id;
		
		//현재 Field에 설정된 레이블 Width 정보 가져오기
		nLabelWidth = nexacro.toNumber(oField.labelwidth);
		
		//레이블 영역을 뺀 Col Size 구하기
		nRealColSize = nColSize - nLabelWidth;
		
		//해당 필드가 표현될 Width/Height값 구하기
		nFieldWidth = fn_GetRealSize(oField.fieldwidth, nRealColSize, FIELD_WIDTH);
		nFieldHeight = fn_GetRealSize(oField.fieldheight, nRowSize, FIELD_HEIGHT);
		
		//컴포넌트의 생성방향이 Horizontal일 경우
		if(sDirection=="horizontal")
		{
		
			//Padding에서 Comp/Line Space로 변환 과정에서 발생하는 차이를 계산
			if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Col", nColIdx+1, nColIdx, false);
			else nTemp = 0;
			
			//Cell의 Width를 초과하는 Field일 경우 줄바꿈 처리
			if(nLeft+nFieldWidth+nLabelWidth-nTemp>nColSize)
			{
				//현재 Row의 마지막에 위치한 Field의 Right값 
				nEndX = nLeft;
				
				//Padding에서 Comp/Line Space로 변환 과정에서 발생하는 차이를 계산
				if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Col", nColIdx, nColIdx-1, false);
				else nTemp = 0;
				
				//현재 Row의 HAlign 시작위치값 구하기
				arrAlignX[nRowIdx] = fn_CalcAlignPos(sHAlign, nColSize, (nEndX - nStartX - nTemp));
				
				//다음Row의 시작 Left/Top 좌표값 만들기
				//현재Row의 Height가 가장 큰 Field의 Bottom값을 다음Row의 Top값으로 설정
				nTop += nFiledHeightMax;
				
				//Left좌표 초기화
				nLeft = 0;
				
				//가장 큰 Height값 초기화
				nFiledHeightMax = 0;
				
				//Col Index 초기화
				nColIdx = 0;
				
				//Row Index 증가
				nRowIdx++;
				
			}
			
			//가장 큰 Height값 구하기
			if(nFieldHeight>nFiledHeightMax)nFiledHeightMax = nFieldHeight;
		}
		//컴포넌트의 생성방향이 Vertical일 경우
		else
		{
			//Cell의 Height를 초과하는 Field일 경우 줄바꿈 처리
			if(nTop+nFieldHeight>nRowSize)
			{
				//현재 Row의 마지막에 위치한 Field의 Bottom값
				nEndY = nTop;
				
				//현재 Row의 VAlign 시작위치값 구하기
				arrAlignY[nRowIdx] = fn_CalcAlignPos(sVAlign, nRowSize, (nEndY - nStartY));
				
				//다음Row의 시작 Left/Top 좌표값 만들기
				//현재Row의 Width가 가장 큰 Field의 Right값을 다음Row의 Left값으로 설정
				nLeft += nFiledWidthMax + nLabelWidth;
				
				//Top 좌표 초기화
				nTop = 0;
				
				//가장 큰 Width값 초기화
				nFiledWidthMax = 0;
				
				//Col Index 초기화
				nColIdx = 0;
				
				//Row Index 증가
				nRowIdx++;
			}
			
			//가장 큰 Width값 구하기
			if(nFieldWidth>nFiledWidthMax)nFiledWidthMax = nFieldWidth;
		}
		
		//Field의 시작 Left/Top 위치값
		if(j==0)
		{
			nStartX = nLeft;
			nStartY = nTop;
		}
		
		//마지막 Field일 경우
		if(j==nFieldInCellCnt-1)
		{
			//컴포넌트의 생성방향이 Horizontal일 경우
			if(sDirection=="horizontal")
			{
				//현재 Row의 마지막에 위치한 Field의 Right값 
				nEndX = nLeft + nLabelWidth + nFieldWidth;
				
				//Padding에서 Comp/Line Space로 변환 과정에서 발생하는 차이를 계산
				if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Col", nColIdx+1, nColIdx, false);
				else nTemp = 0;
				
				//현재 Row의 HAlign 시작 위치값 구하기
				arrAlignX[nRowIdx] = fn_CalcAlignPos(sHAlign, nColSize, (nEndX - nStartX - nTemp));
				
				//마지막에 위치한 Field까지의 가장 큰 Height를 가진 Field의 Bottom값 
				nEndY = nTop + nFiledHeightMax;
				
				//VAlign의 시작 위치값 구하기
				nAlignY = fn_CalcAlignPos(sVAlign, nRowSize, (nEndY - nStartY));	
			}
			//컴포넌트의 생성방향이 Vertical일 경우
			else
			{
				//현재 Row의 마지막에 위치한 Field의 Bottom값 
				nEndY = nTop+nFieldHeight;
				
				//현재 Row의 HAlign 시작 위치값 구하기
				arrAlignY[nRowIdx] = fn_CalcAlignPos(sVAlign, nRowSize, (nEndY - nStartY));
				
				//마지막에 위치한 Field까지의 가장 큰 Width를 가진 Field의 Right값 
				nEndX = nLeft + nFiledWidthMax + nLabelWidth;
				
				//Padding에서 Comp/Line Space로 변환 과정에서 발생하는 차이를 계산
				if(nRowIdx!=0)nTemp = fn_CalcPaddingToSpace("Col", nRowIdx+1, nRowIdx, false);
				else nTemp = 0;
				
				//HAlign의 시작 위치값 구하기
				nAlignX = fn_CalcAlignPos(sHAlign, nColSize, (nEndX - nStartX - nTemp));
			}
		}
		
		//Field의 위치정보 저장
		arrFieldPosition[j] = 
		{
			"fieldid" : sFieldId,
			"left" : nLeft,
			"top" : nTop,
			"width" : nFieldWidth,
			"height" : nFieldHeight,
			"rowidx" : nRowIdx,
			"colidx" : nColIdx,
			"alignx" : 0,
			"aligny" : 0
		};
		
		//다음 Field의 Left/Top 위치값 설정
		if(sDirection=="horizontal")nLeft += nFieldWidth + nLabelWidth;
		else nTop += nFieldHeight;
		
		//Col Index 증가
		nColIdx++;
	}
	
	//Field의 위치정보에 Align X/Y 값 저장
	if(sDirection=="horizontal")
	{
		for(var i=0;i<arrFieldPosition.length;i++)
		{
			nRowIdx = arrFieldPosition[i].rowidx;
			arrFieldPosition[i].alignx = arrAlignX[nRowIdx];
			arrFieldPosition[i].aligny = nAlignY;
		}
	}else
	{
		for(var i=0;i<arrFieldPosition.length;i++)
		{
			nRowIdx = arrFieldPosition[i].rowidx;
			arrFieldPosition[i].alignx = nAlignX;
			arrFieldPosition[i].aligny = arrAlignY[nRowIdx];
		}
	}
	
	//Field의 위치정보 리턴
	return arrFieldPosition;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_MakeCompByLayout
 * Parameter    : 
				- oLayout : 레이아웃 설정 정보
 * Return       : 
 * Description  : Layout 기반 컴포넌트 생성 함수
 *---------------------------------------------------------------------------------------------*/
fn_MakeCompByLayout = function(oLayout)
{
	//레이아웃에 설정된 CellList 정보
	var arrCellList = oLayout.celllist;
	
	//레이아웃에 설정된 ColumnSize 정도
	var arrColSize = oLayout.columnsize;
	
	//레이아웃에 설정된 RowSize 정보
	var arrRowSize = oLayout.rowsize;
	
	//Column/Row 디폴트 사이즈 가져오기
	var nColSizeDef = oLayout.colsizedef;
	var nRowSizeDef = oLayout.rowsizedef;
	
	var nCol, nRow, nColSpan, nRowSpan;
	var sDirection, sVAlign, sHAlign;
	var nWidth;
	var nHeight;
	
	var oCell;
	var oStatic;
	
	for(var i=0;i<arrCellList.length;i++)
	{
		oCell = arrCellList[i];
		sDirection = oCell.direction
		nCol = nexacro.toNumber(oCell.col);
		nRow = nexacro.toNumber(oCell.row);
		nColSpan = nexacro.toNumber(oCell.colspan);
		nRowSpan = nexacro.toNumber(oCell.rowspan);
		
		//Col/RowSpan 값이 없을 경우 1로 초기화
		if(!nColSpan)nColSpan = 1;
		if(!nRowSpan)nRowSpan = 1;
		
		//Cell에 Field가 없을 경우 continue
		if(!oCell.fieldlist)continue;
		
		//현재 Cell의 Left/Top 위치값 가져오기
		nLeft = fn_GetCellSize(arrColSize, 0, nCol, nColSizeDef);
		nTop = fn_GetCellSize(arrRowSize, 0, nRow, nColSizeDef);
				
		if(arrRowSize.length==nRow + nRowSpan)
		{
			fn_MakeComp(nLeft, nTop, oCell.realcolsize, oCell.realrowsize, sDirection, oCell.fieldposition, true, true);
		}else
		{
			fn_MakeComp(nLeft, nTop, oCell.realcolsize, oCell.realrowsize, sDirection, oCell.fieldposition, true, false);
		}
	}
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_MakeComp
 * Parameter    : 
				- nBaseLeft : 컴포넌트를 생성할 기준 좌표(Left)
				- nBaseTop : 컴포넌트를 생성할 기준 좌표(Top)
				- nBaseWidth : 컴포넌트를 생성할 기준 좌표(Width)
				- nBaseHeight : 컴포넌트를 생성할 기준 좌표(Height)
				- sDirection : 컴포넌트 생성 방향
				- arrFieldPosition : Field의 위치정보가 담긴 Object Array
				- bUseLayout : 레이아웃 사용 여부
				- bLastRow : 마지막 Row인지 여부
 * Return       : 
 * Description  : 컴포넌트 태그 생성 함수
 *---------------------------------------------------------------------------------------------*/
fn_MakeComp = function(nBaseLeft, nBaseTop, nBaseWidth, nBaseHeight, sDirection, arrFields, bUseLayout, bLastRow)
{
	var nLabelLeft, nLabelTop, nLabelWidth, nLabelHeight;
	var nCompLeft, nCompTop, nCompWidth, nCompHeight;
	var nPosLeft, nPosTop, nPosWidth, nPosHeight;
	var nLabelAreaWidth;
		
	var oAlignPos;
	var sFieldId;
	var oField;
	var oFieldPosition;
	var nRowIdx, nColIdx;
	var nAlignX, nAlignY;
	
	var oModel = oContents.View.Model;
	var sCompId;
	var oCompClass;
	var sCompCssClass;
	var sLabelCssClass;
	var sFieldBgCssClass = COMP_BG_CSSCLASS;
	
	if(!bUseLayout)bUseLayout = false;
	
	//레이아웃을 사용할 경우
	if(bUseLayout==true)
	{
		for(var i=0;i<arrFields.length;i++)
		{
			//Field 오브젝트 가져오기
			oFieldPosition = arrFields[i];
			sFieldId = oFieldPosition.fieldid;
			oField = oFieldArray.fields.filter(fields=>fields.id==sFieldId)[0];
			
			//컴포넌트의 네이밍룰 정보 가져오기
			oCompClass = fn_GetCompClass(oField.comptype);
			
			//컴포넌트의 Css Class Id 값 가져오기
			sCompCssClass = oField.cssclass;
			
			//레이블의 Css Class Id 값 가져오기
			sLabelCssClass = oField.labelcssclass;
						
			//Field가 위치할 Row/Col Index 가져오기
			nRowIdx = oFieldPosition.rowidx;
			nColIdx = oFieldPosition.colidx;
			
			//Field의 Align 위치 정보 가져오기
			nAlignX = oFieldPosition.alignx;
			nAlignY = oFieldPosition.aligny;
			
			//Field의 위치 정보 가져오기
			nPosLeft = nexacro.toNumber(oFieldPosition.left);
			nPosTop = nexacro.toNumber(oFieldPosition.top);
			nPosWidth = nexacro.toNumber(oFieldPosition.width);
			nPosHeight = nexacro.toNumber(oFieldPosition.height);		
			
			//첫번째 Field의 레이블정보로 레이블영역 만들기
			if(i==0)
			{
				nLabelAreaWidth = nexacro.toNumber(oField.labelwidth);
				nLabelLeft = nBaseLeft + nPosLeft;
				nLabelTop = nBaseTop + nPosTop;
				nLabelWidth = nLabelAreaWidth;
				
				//레이블 위/아래 사이 간격이 겹치게 표현되야 하므로
				//마지막 레이블이 아닐 경우 1px 증가
				if(bLastRow==false)nLabelHeight = nexacro.toNumber(nBaseHeight)+1;
				else nLabelHeight = nexacro.toNumber(nBaseHeight);
			}
			
			//컴포넌트 Left좌표 = Cell Left + Field Left + 레이블 영역 Width + HAlign 시작좌표
			nCompLeft = nBaseLeft + nPosLeft + nLabelAreaWidth + nAlignX;
			
			//컴포넌트 Top좌표 = Cell Top + Field Top + VAlign 시작좌표
			nCompTop = nBaseTop + nPosTop + nAlignY;
			
			//컴포넌트 Width = Field Width - Left/Right Padding
			nCompWidth = nPosWidth - COMP_PADDING_LEFT - COMP_PADDING_RIGHT;
			
			//컴포넌트 Height = Field Height - Top/Bottom Padding
			nCompHeight = nPosHeight - COMP_PADDING_TOP - COMP_PADDING_BOTTOM;
			
			if(sDirection=="horizontal")
			{
				if(nColIdx!=0)
				{
					//컴포넌트 Left좌표 = 컴포넌트 Left좌표 - (첫번째 컴포넌트의 Left Padding을 뺀 나머지 Padding 값) + (Comp Space * 컴포넌트 갯수)
					nCompLeft = nCompLeft - (COMP_PADDING_LEFT*nColIdx) - (COMP_PADDING_RIGHT*(nColIdx-1)) + (COMP_SPACE *nColIdx);
				}else
				{
					//컴포넌트 Left좌표 = 컴포넌트 Left좌표 + 컴포넌트 Left Padding
					nCompLeft = nCompLeft + COMP_PADDING_LEFT;
				}
				
				if(nRowIdx!=0)
				{
					//컴포넌트 Top좌표 = 컴포넌트 Top좌표 - (첫번째 컴포넌트의 Top Padding을 뺀 나머지 Padding 값) + (Line Space * 컴포넌트 갯수)
					nCompTop = nCompTop - (COMP_PADDING_TOP*(nRowIdx-1)) - (COMP_PADDING_BOTTOM*nRowIdx) + (LINE_SPACE *nRowIdx);
				}else
				{
					//컴포넌트 Top좌표 = 컴포넌트 Top좌표 + 컴포넌트 Top Padding
					nCompTop = nCompTop + COMP_PADDING_TOP;
				}					
			}else
			{
				if(nRowIdx!=0)
				{
					//컴포넌트 Left좌표 = 컴포넌트 Left좌표 - (첫번째 컴포넌트의 Left Padding을 뺀 나머지 Padding 값) + (Comp Space * 컴포넌트 갯수)
					nCompLeft = nCompLeft - (COMP_PADDING_LEFT*nRowIdx) - (COMP_PADDING_RIGHT*(nRowIdx-1)) + (COMP_SPACE *nRowIdx);
					
				}else
				{
					//컴포넌트 Left좌표 = 컴포넌트 Left좌표 + 컴포넌트 Left Padding
					nCompLeft = nCompLeft + COMP_PADDING_LEFT;
				}					
				
				if(nColIdx!=0)
				{
					//컴포넌트 Top좌표 = 컴포넌트 Top좌표 - (첫번째 컴포넌트의 Top Padding을 뺀 나머지 Padding 값) + (Line Space * 컴포넌트 갯수)
					nCompTop = nCompTop - (COMP_PADDING_TOP*(nColIdx-1)) - (COMP_PADDING_BOTTOM*nColIdx) + (LINE_SPACE *nColIdx);
				}else
				{
					//컴포넌트 Top좌표 = 컴포넌트 Top좌표 + 컴포넌트 Top Padding
					nCompTop = nCompTop + COMP_PADDING_TOP;
				}
			}
			
			oModel[oModel.length] = {"fieldid" : sFieldId,"Components" : []};
			
			//첫번째 레이블이고 레이블 Width가 0이 아니면 레이블 태그 추가
			if(i==0)
			{
				//필드 배경 Static 추가
				sCompId = fn_GetCompId("st"+sFieldId+"_bg");
				oComp = {
							"tag" : "Static",
							"attribute" :
							{
								"id" : sCompId, "left" : nPosLeft, "top" : nPosTop, "width" : nPosWidth + nLabelWidth, "height" : nLabelHeight
								,"cssclass" : sFieldBgCssClass
							}
						};
				oModel[oModel.length-1].Components.push(oComp);
				
				if(nLabelWidth>0)
				{
					sCompId = fn_GetCompId("st"+sFieldId+"_Label");
					oComp = {
								"tag" : "Static",
								"attribute" :
								{
									"id" : sCompId, "left" : nLabelLeft, "top" : nLabelTop, "width" : nLabelWidth, "height" : nLabelHeight
									, "text" : oField.label, "cssclass" : sLabelCssClass
								}
							};
					oModel[oModel.length-1].Components.push(oComp);
				}
			}
			
			//컴포넌트 태그 추가
			sCompId = fn_GetCompId(oCompClass.prefix+sFieldId);
			oComp = {
						"tag" : oCompClass.classId,
						"attribute" :
						{
							"id" : sCompId, "left" : nCompLeft, "top" : nCompTop, "width" : nCompWidth, "height" : nCompHeight
							, "cssclass" : sCompCssClass
						}
					};
			
			//컴포넌트의 Type이 Button일 경우 레이블 텍스트를 text속성에 추가
			if(oField.comptype=="button")
			{
				oComp.attribute.text = oField.label;
			}
			//컴포넌트의 Type이 Checkbox 일 경우 레이블 텍스트를 text속성에 추가
			else if(oField.comptype=="checkbox")
			{
				oComp.attribute.text = oField.label;
			}//컴포넌트의 Type이 Static 일 경우 레이블 텍스트를 text속성에 추가
			else if(oField.comptype=="static")
			{
				oComp.attribute.text = oField.label;
			}else
			{
				//Bind처리를 위해 BindItems Array에 컴포넌트 Id, Field Id 추가
				arrBindItems[arrBindItems.length] = {"compid" : sCompId, "fieldid" : sFieldId, "comptype" : oField.comptype};
			}
			
			oModel[oModel.length-1].Components.push(oComp);		
		}
	}
	//레이아웃을 사용하지 않을 경우
	else
	{
		for(var i=0;i<arrFields.length;i++)
		{
			//Field 오브젝트 가져오기
			oFieldPosition = arrFields[i];
			sFieldId = oFieldPosition.fieldid;
			oField = oFieldArray.fields.filter(fields=>fields.id==sFieldId)[0];
						
			//컴포넌트의 네이밍룰 정보 가져오기
			oCompClass = fn_GetCompClass(oField.comptype);
			
			//컴포넌트의 Css Class Id 값 가져오기
			sCompCssClass = oField.cssclass;
			
			//레이블의 Css Class Id 값 가져오기
			sLabelCssClass = oField.labelcssclass;
			
			//Field가 위치할 Row/Col Index 가져오기
			nRowIdx = oFieldPosition.rowidx;
			nColIdx = oFieldPosition.colidx;
			
			//Field의 Align 위치 정보 가져오기
			nAlignX = oFieldPosition.alignx;
			nAlignY = oFieldPosition.aligny;
			
			//Field의 위치 정보 가져오기
			nPosLeft = nexacro.toNumber(oFieldPosition.left);
			nPosTop = nexacro.toNumber(oFieldPosition.top);
			nPosWidth = nexacro.toNumber(oFieldPosition.width);
			nPosHeight = nexacro.toNumber(oFieldPosition.height);			
			
			//Field의 레이블 Width 정보 가져오기
			nLabelAreaWidth = nexacro.toNumber(oField.labelwidth);
			
			//Component가 위치할 Left/Top 좌표 계산하기
			//Align, Padding, Comp/Line Space 등을 반영한 실제 컴포넌트 위치정보 구하기
			//레이블 Left좌표 = Cell Left + Field Left + HAlign 시작좌표
			nLabelLeft = nBaseLeft + nPosLeft + nAlignX;
			
			//레이블 Top좌표 = Cell Top + Field Top + VAlign 시작좌표
			nLabelTop = nBaseTop + nPosTop + nAlignY;
			
			//레이블 Width = 레이블 영역 Width
			nLabelWidth = nLabelAreaWidth;
			
			//레이블 Height = Field Height
			nLabelHeight =  nPosHeight;
			
			if(sDirection=="horizontal")
			{
				if(nColIdx!=0)
				{
					nLabelLeft = nLabelLeft - (COMP_PADDING_RIGHT*(nColIdx-1)) + (COMP_SPACE *nColIdx);
				}else
				{
					nLabelLeft = nBaseLeft + nPosLeft + nAlignX;
				}
			}else
			{
				if(nRowIdx!=0)
				{
					nLabelLeft = nLabelLeft - (COMP_PADDING_RIGHT*(nRowIdx-1)) + (COMP_SPACE *nRowIdx);
				}else
				{
					nLabelLeft = nBaseLeft + nPosLeft + nAlignX;
				}
			}
			
			if(sDirection=="horizontal")
			{
				if(arrFields[arrFields.length-1].rowidx!=nRowIdx)nLabelHeight = nLabelHeight + 1;
			}else
			{
				if(!(i==arrFields.length-1||arrFields[i+1].colidx==0))nLabelHeight = nLabelHeight + 1;
			}
						
			nCompLeft = nLabelLeft + nLabelWidth + COMP_PADDING_LEFT;
			nCompTop = nBaseTop + nPosTop + nAlignY + COMP_PADDING_TOP;
			nCompWidth = nPosWidth - COMP_PADDING_LEFT - COMP_PADDING_RIGHT;
			nCompHeight = nPosHeight - COMP_PADDING_TOP - COMP_PADDING_BOTTOM;
			
			oModel[oModel.length] = {"fieldid" : sFieldId,"Components" : []};
			
			//필드 배경 Static 추가
			sCompId = fn_GetCompId("st"+sFieldId+"_bg");
			oComp = {
						"tag" : "Static",
						"attribute" :
						{
							"id" : sCompId, "left" : nPosLeft, "top" : nPosTop, "width" : nPosWidth + nLabelWidth, "height" : nLabelHeight
							,"cssclass" : sFieldBgCssClass
						}
					};
			oModel[oModel.length-1].Components.push(oComp);
			
			if(nLabelWidth>0)
			{
				sCompId = fn_GetCompId("st"+sFieldId+"_Label");
				oComp = {
							"tag" : "Static",
							"attribute" :
							{
								"id" : sCompId, "left" : nLabelLeft, "top" : nLabelTop, "width" : nLabelWidth, "height" : nLabelHeight
								, "text" : oField.label, "cssclass" : sLabelCssClass
							}
						};
				oModel[oModel.length-1].Components.push(oComp);
			}
						
			sCompId = fn_GetCompId(oCompClass.prefix+sFieldId);
							
			oComp =	{
						"tag" : oCompClass.classId,
						"attribute" :
						{
							"id" : sCompId, "left" : nCompLeft, "top" : nCompTop, "width" : nCompWidth, "height" : nCompHeight, "cssclass" : sCompCssClass
						}
					};
			if(oField.comptype=="button")
			{
				oComp.attribute.text = oField.label;
			}
			//컴포넌트의 Type이 Checkbox 일 경우 레이블 텍스트를 text속성에 추가
			else if(oField.comptype=="checkbox")
			{
				oComp.attribute.text = oField.label;
			}//컴포넌트의 Type이 Static 일 경우 레이블 텍스트를 text속성에 추가
			else if(oField.comptype=="static")
			{
				oComp.attribute.text = oField.label;
			}else
			{
				arrBindItems[arrBindItems.length] = {"compid" : sCompId, "fieldid" : sFieldId, "comptype" : oField.comptype};
			}
			oModel[oModel.length-1].Components.push(oComp)
		}
	}
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetCompId
 * Parameter    : 
				- sCompId : 생성할 컴포넌트 아이디
 * Return       : sRtnCompId : 컴포넌트 ID
 * Description  : 컴포넌트 ID 생성 함수
 *---------------------------------------------------------------------------------------------*/
fn_GetCompId = function(sCompId)
{
	//동일한 Field로 생성된 컴포넌트 있는지 체크
	var arrTemp = arrCompIds.filter(arrCompIds=>arrCompIds.indexOf(sCompId)==0);
	var sRtnCompId;
	
	//동일한 Field로 생성된 컴포넌트가 존재할 경우
	if(arrTemp.length>0)sRtnCompId = sCompId+"_"+arrTemp.length;
	
	//동일한 Field로 생성된 컴포넌트가 없을 경우 
	else sRtnCompId = sCompId;
	
	//컴포넌트 ID관리 Array에 추가
	arrCompIds[arrCompIds.length] = sRtnCompId;
	
	//컴포넌트 ID 리턴
	return sRtnCompId;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetRealSize
 * Parameter    : 
				- sSize : 사이즈정보(% or px)
				- nParentSize : 부모영역의 사이즈 정보
				- sDefSize : 디폴트 사이즈 정보
				
 * Return       : nRealSize : px기준 사이즈
 * Description  : 등록된 사이즈를 기준으로 실제 사용할 사이즈 구하는 함수
 *---------------------------------------------------------------------------------------------*/
fn_GetRealSize = function(sSize, nParentSize, sDefSize)
{
	var nRealSize;
	var nSizeType;
	
	if(!sSize)sSize = sDefSize;
		
	nSizeType = sSize.replace(/[0-9]/g, "");
	
	if(nSizeType=="%")
	{
		nRealSize = nexacro.toNumber(sSize.replace(/[^0-9]/g, ""));
		nRealSize = (nRealSize/100) * nParentSize;
	}else
	{
		nRealSize = nexacro.toNumber(sSize.replace(/[^0-9]/g, ""));
	}
	
	return nRealSize;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetCellSize
 * Parameter    : 
				- arrList : columnsize or rowsize 사이즈정보(% or px)
				- nIdx : 시작 Column/Row Index 정보
				- nSpan : Column/Row Span 정보
				- nDefSize : -1 일 경우 사용할 디폴트 사이즈 정보
				
 * Return       : nSize : px기준 사이즈
 * Description  : Cell의 Width/Height 구하는 함수
 *---------------------------------------------------------------------------------------------*/
fn_GetCellSize = function(arrList, nIdx, nSpan, nDefSize)
{
	var nSize = 0;
	
	for(var i=nIdx; i<nIdx+nSpan; i++)
	{
		if(nexacro.toNumber(arrList[i])==-1)
		{
			nSize += nexacro.toNumber(nDefSize);
		}else
		{
			nSize += nexacro.toNumber(arrList[i]);
		}
	}
	
	return nSize;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_CalcPaddingToSpace
 * Parameter    : 
				- sType : Col or Row
				- nIdx1 : Padding 계산 시 필요한 컴포넌트 Index 값
				- nIdx2 : Paddign + Space 계산 시 컴포넌트 Index 값
				- bLayout : 레이아웃 사용여부
 * Return       : nTemp : 보정 px 값
 * Description  : Padding으로 간격설정된 값을 Padding + CompSpace or LineSpace로 변경했을 때 
                  보정이 필요한 px 값을 구하는 함수
 *---------------------------------------------------------------------------------------------*/
fn_CalcPaddingToSpace = function(sType, nIdx1, nIdx2, bLayout)
{
	var nTemp;
	
	//컴포넌트간 사이간격은 Padding정보 대신 Comp/Line Space로 계산하므로 위치를 보정하기 위한 계산식
	//컴포넌트 Padding 계산식 = (컴포넌트 Left/Right Padding * 컴포넌트 순번)
	//컴포넌트 Space 계산식 = (첫번째 컴포넌트의 Left/Top Padding + 마지막 컴포넌트의 Right/Bottom Padding + Space * 컴포넌트 순번)
	//차이값 계산 = 컴포넌트 Padding 계산식 - 컴포넌트 Space 계산식
	if(bLayout==true)
	{
		if(sType=="Col")
		{
			nTemp = ((COMP_PADDING_LEFT+COMP_PADDING_RIGHT) * nIdx1) - (COMP_PADDING_LEFT + COMP_PADDING_RIGHT + (COMP_SPACE * nIdx2));
		}else
		{
			nTemp = ((COMP_PADDING_TOP+COMP_PADDING_BOTTOM) * nIdx1) - (COMP_PADDING_TOP + COMP_PADDING_BOTTOM + (LINE_SPACE * nIdx2));
		}
	}else
	{
		if(sType=="Col")
		{
			nTemp = (COMP_PADDING_RIGHT * nIdx1) - (COMP_PADDING_RIGHT + (COMP_SPACE * nIdx2));
		}else
		{
			nTemp = -(LINE_SPACE * nIdx2);
		}
	}
	
	
	return nTemp
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_CalcAlignPos
 * Parameter    : 
				- sAlign : 컴포넌트 정렬 방식
				- nParentSize : 부모영역의 사이즈
				- nSize : 컴포넌트영역의 사이즈
 * Return       : nRtnValue : 시작위치 px 값
 * Description  : Row/Col의 Align 시작위치값 구하기
 *---------------------------------------------------------------------------------------------*/
fn_CalcAlignPos = function(sAlign, nParentSize, nSize)
{
	var nRtnValue;
	
	if(sAlign=="center"||sAlign=="middle")nRtnValue = (nParentSize - nSize)/2;
	else if(sAlign=="right"||sAlign=="bottom")nRtnValue = nParentSize - nSize;
	else nRtnValue = 0;
	
	if(nRtnValue<0)nRtnValue = 0;
	
	return nRtnValue;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetInitValue
 * Return       : initvalue contents (JSON format)
 * Description  : Function to generate <InitValue> source
 *---------------------------------------------------------------------------------------------*/
fn_GetInitValue = function(){
    
    var oInitValue = [];
    
    return oInitValue;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetObjects
 * Return       : objects contents (JSON format)
 * Description  : Function to generate <Objects> source
 *---------------------------------------------------------------------------------------------*/
fn_GetObjects = function(){
    
    //오브젝트 오브젝트 초기화
    var oObjects = [];
    
    //오브젝트 정보 설정
    oObjects =     
    [
        {
            "tag": "Dataset",
            "attribute": { "id": "viewdataset" },
            "Dataset": [
            {
                "tag": "ColumnInfo",
                "attribute": {},
                //컬럼정보 설정함수 호출
                "ColumnInfo": fn_GetDsColumns()
            },
            {
                "tag": "Rows",
                "attribute": {},
                //로우정보 설정함수 호출
                "Rows": fn_GetDsRows()
            }]
        }
    ];
    
    //오브젝트 정보 리턴
    return oObjects;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetBind
 * Return       : bind contents (JSON format)
 * Description  : Function to generate <Bind> source
 *---------------------------------------------------------------------------------------------*/
fn_GetBind = function(){
    
    var oBind = [];
    var oBindItems = [];
    
    var sCompId
    var sFieldId;
	var sCompType;
	var sBindDataset = "viewdataset";
	var nBindItemCount = arrBindItems.length;
        
    for(var i=0;i<nBindItemCount;i++)
    {    
        sCompId = arrBindItems[i].compid;
		sFieldId = arrBindItems[i].fieldid;
        sCompType = arrBindItems[i].comptype;
		if(sCompType=="static")
		{
			oBindItems[i] = 
			{
				"tag" : "BindItem",
				"attribute" : 
				{
					"id" : "bind_"+sCompId, "compid" : sCompId, "propid" : "text", "datasetid" : sBindDataset, "columnid" : sFieldId
				}
			}
		}else
		{
			oBindItems[i] = 
			{
				"tag" : "BindItem",
				"attribute" : 
				{
					"id" : "bind_"+sCompId, "compid" : sCompId, "propid" : "value", "datasetid" : sBindDataset, "columnid" : sFieldId
				}
			}
		}
        
    }
    
    oBind[oBind.length] = {"tag" : "Bind", "Bind" : oBindItems};
    
    return oBind;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetScript
 * Return       : script contents (JSON format)
 * Description  : Function to generate <Script> source
 *---------------------------------------------------------------------------------------------*/
fn_GetScript = function(){
    var oScript = {};
    
    /*
    oScript = 
    {
        "tag": "Script",
        "attribute": { "type" : "xscript5.1" },
        "value": "this.fn_Alert = function(){this.alert('MESSAGE')};"
    }
    */
    
    return oScript;
};

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetCompClass
 * Parameter    : 
 *                - sCompType : CompType of field
 * Return       : component class data
 * Description  : Returns class information of the component based on Field data
 *---------------------------------------------------------------------------------------------*/
fn_GetCompClass = function(sCompType)
{
	var oCompClass = { "classId" : null, "prefix" : null };
	
	switch(sCompType)
	{
		case "button" : oCompClass.classId = "Button";
						oCompClass.prefix = "btn";
						break;
		case "combo" : oCompClass.classId = "Combo";
						oCompClass.prefix = "cmb";
						break;
		case "edit" : oCompClass.classId = "Edit";
						oCompClass.prefix = "edt";
						break;
		case "maskedit" : oCompClass.classId = "MaskEdit";
						oCompClass.prefix = "msk";
						break;
		case "textarea" : oCompClass.classId = "TextArea";
						oCompClass.prefix = "ta";
						break;
		case "static" : oCompClass.classId = "Static";
						oCompClass.prefix = "st";
						break;
		case "radio" : oCompClass.classId = "Radio";
						oCompClass.prefix = "rdo";
						break;
		case "checkbox" : oCompClass.classId = "CheckBox";
						oCompClass.prefix = "chk";
						break;
		case "spin" : oCompClass.classId = "Spin";
						oCompClass.prefix = "spn";
						break;
		case "calendar" : oCompClass.classId = "Calendar";
						oCompClass.prefix = "cal";
						break;
		case "imageviewer" : oCompClass.classId = "ImageViewer";
						oCompClass.prefix = "img";
						break;
		case "progressbar" : oCompClass.classId = "ProgressBar";
						oCompClass.prefix = "prg";
						break;
		default : oCompClass.classId = "Static";
				  oCompClass.prefix = "st";
	}
	
    //컴포넌트 정보 리턴
    return oCompClass;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetDsColumns
 * Parameter    : 
 *                - oFieldArray : model field data
 * Return       : dataset column(s) data
 * Description  : Function to generate <Column> source
 *---------------------------------------------------------------------------------------------*/
fn_GetDsColumns = function()
{
    var i;
    var oColumns = [];
    
    var oField;
    var sFieldId;
    var sDataType;
    var sDataSize;
    
    //모델 Field 개수 가져오기
    var nCount = oFieldArray.fieldcount;
    
    //모델 Field 개수 만큼 컬럼 정보 만들기
    for(i=0;i<nCount;i++)
    {
        oField = oFieldArray.fields[i];
        
        sFieldId = oField.id;
        sDataType = oField.datatype;
        sDataSize = oField.datasize;
        
		if(oField.comptype!="button")
		{
			oColumns[i] = 
			{
				"tag": "Column",
				"attribute": 
				{
					"id": sFieldId, "type": sDataType, "size": sDataSize
				}
			};
		}
    }
    
    //컬럼 정보 리턴
    return oColumns;
}

/*---------------------------------------------------------------------------------------------*
 * Function     : fn_GetDsRows
 * Parameter    : 
 *                - oFieldArray : model field data
 * Return       : dataset row(s) data
 * Description  : Function to generate <Row> source
 *---------------------------------------------------------------------------------------------*/
fn_GetDsRows = function()
{
    var i;
    var oRows = [];
    var oRow = [];
    
    var oField;
    var sFieldId;
    
    //로우 개수
    var nRowCnt = 1;

    //컬럼 개수
    var nColCnt = oFieldArray.fieldcount;
    
    for(i=0;i<nRowCnt;i++)
    {
        oRow = [];
        
        //Row정보 Rows에 추가
        oRows[i] = {"tag": "Row",    "attribute": {},"Row": oRow};
    }
    
    //Rows 정보 리턴
    return oRows;
}
]]></Script>
</ViewTemplateInfo>
