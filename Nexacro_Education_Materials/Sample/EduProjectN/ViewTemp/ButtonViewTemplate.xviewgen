<?xml version="1.0" encoding="utf-8"?>
<ViewTemplateInfo version="1.0">
  <ViewTemplate id="ButtonViewTemplate" viewtype="Asset" description=""/>
  <Script version="1.0" type="xscript5.1"><![CDATA[/*============================================================================================*								
o File Name   : ButtonViewTemplate.xviewgen								
o Developer   : Kim Dae Won								
o Create Date : 2021.04.29								
o Description : Button View Template								
o Version     : 1.0.0.0								
*============================================================================================*/								
//////////////////////////////Constant Setting START ////////////////////////////////////////////////////								
								
//Field Default Width								
var FIELD_WIDTH    		  = "80px";						
								
//Field Default Height								
var FIELD_HEIGHT   		  = "30px";						
								
//Component Padding								
var COMP_PADDING_LEFT     = 0;								
var COMP_PADDING_TOP      = 0;								
var COMP_PADDING_RIGHT    = 0;								
var COMP_PADDING_BOTTOM   = 0;								
								
//Gap Between Components (Left and Right)								
var COMP_SPACE     		  = 5;						
								
//Gap Between Components (Top and Bottom)								
var LINE_SPACE     		  = 5;						
								
//Component Default CSS Class								
var COMP_CSSCLASS		  = "";						
								
//////////////////////////////Constant Setting END ////////////////////////////////////////////////////								
								
//Model Information								
var oFieldArray;								
								
//View Component Information								
var oContents;								
								
//View Option Setting Information								
var oGenerationAttr;								
								
//Component ID List								
var arrCompIds = [];								
								
//Component + Bind Field List								
var arrBindItems = [];								
								
/*============================================================================================*								
* Parameter Structure Example								
								
1. 'fieldarray' structure example								
{								
    "modelinfo":								
    {								
        "serviceid":"model_sample",                                // model service id								
        "serviceurl":"http://127.0.0.1:8983/app/addSearchApi.do?"  // model service url								
    },								
    "fieldcount" : "2",                                            // number of fields in model								
    "fields" :								
    [								
        {                                                          // About the first field								
            "id": "company",								
            "label": "Company Name",								
            "fieldtype": "SelectOne",								
            "datatype": "STRING",								
            "datasize": "80",								
            "editable": "true",								
            "uselabel": "true"								
        },								
        {                                                          // About the second field								
            "id": "department",								
            "label": "Department Name",								
            "fieldtype": "SelectOne",								
            "datatype": "STRING",								
            "datasize": "80",								
            "editable": "true",								
            "uselabel": "true"								
        } 								
    ]								
}								
								
2. 'generationattr' structure example								
{                                                                  // user-entered attributes for 'view' generation								
  "attributes": {								
    "use_triggerbutton": "true"								
    "triggerbuttontext": "Search"								
  }								
}								
								
3. 'contents' structure example								
// --- design source of xfdl --- //								
//   <View id="View00" viewtype="FreeForm" taborder="2" ... >								
//     <Layouts>								
//       <Layout>								
//         <Static id="Static00" text="Company Name" left="0" .../>								
//         <Combo id="Combo00" left="85" top="0" .../>								
//         <Button id="btn_Trigger" left="617" top="5" .../>								
//         ...								
//       </Layout>								
//     </Layouts>								
//     <InitValue>								
//       <Combo id="Combo00" enable="true"/>								
//     </InitValue>								
//     <Objects>								
//       <Dataset id="Viewdataset">      								
//         <ColumnInfo>      								
//           <Column id="company" type="BLOB" size="80"/>      								
//           <Column id="department" type="BLOB" size="80"/>      								
//         </ColumnInfo>      								
//         <Rows>      								
//           <Row/>      								
//         </Rows>      								
//       </Dataset>      								
//     </Objects>  								
//     <Bind>								
//       <BindItem id="item0" compid="Combo00" propid="value" datasetid="viewdataset" columnid="company"/>								
//     </Bind>								
//     <Script type="xscript5.1"><![CDATA[this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}; ] ]></Script>								
//   </View>								
    								
// --- design source converted to json format --- //								
{								
    "View": {                                                     // <View id="View00" viewtype="FreeForm" taborder="2" ... />								
        "tag": "View",								
        "referenceinfo": {								
            "realwidth": "500",                                   // Real width of view component								
            "realheight": "250"                                   // Real height of view component								
        },								
        "attribute": {								
            "id": "View00",                                       // 'ID' of view component								
            "viewtype": "FreeForm",                               // 'viewtype' property value of view component								
            "taborder": "2",                                      // 'taborder' property value of view component								
            "text": "search view",                                // 'text' property value of view component								
            "left": "0",                                          // 'left' property value of view component								
            "top": "0",                                           // 'top' property value of view component								
            "width": "100%",                                      // 'width' property value of view component								
            "height": "50%"                                       // 'height' property value of view component								
        },								
        "Model": [                                                // Information of components generated by each model field information.								
            {                                                     // "fieldid" : "value" => The component generated by the field of Model								
                "fieldid": "company",                             // "fieldid" : ""      => The component generated without the field of Model								
                "Components": [                                   // The component information generated by the 'company' field.								
                    {                                             //   <Static id="Static00" text="Company Name" left="0" .../>								
                        "tag": "Static",								
                        "attribute": {								
                            "id": "Static00",								
                            "text": "Company Name",								
                            "left": "0",								
                            "top": "0",								
                            "width": "80",								
                            "height": "20",								
                        }								
                    },								
                    {                                             //   <Combo id="Combo00" left="85" top="0" .../>								
                        "tag": "Combo",								
                        "attribute": {								
                            "id": "Combo00",								
                            "left": "85",								
                            "top": "0",								
                            "width": "100",								
                            "height": "24",								
                        }								
                    }								
                ]								
            },								
            {   // with field								
                "fieldid": "department",                          // "fieldid" : "value" => The component generated by the field of Model								
                "Components": [								
                ...								
                ]								
            },								
            {								
                "fieldid": "",                                    // "fieldid" : ""      => The component generated without the field of Model								
                "Components": [								
                    {                                             //   <Button id="btn_Trigger" left="617" top="5" .../>								
                        "tag": "Button",								
                        "attribute": {								
                          "id": "btn_Trigger",								
                          "left": "617",								
                          "top": "5",								
                          "width": "70",								
                          "height": "50",								
                          "text": "Search"								
                        }								
                    }								
                ]								
            }								
        ],								
        "InitValue": [								
          {                                                       //   <InitValue>								
            "tag": "InitValue",                                   //     <Combo id="Combo00" enable="true"/>								
            "InitValue": [                                        //   </InitValue>								
              {								
                "tag": "Combo",								
                "attribute": {								
                  "id": "Combo00",								
                  "enable": "true"								
                }								
              }								
            ]								
          }								
        ],								
        "Objects": [								
          {                                                       //   <Objects>								
            "tag": "Objects",                                     //     <Dataset id="Viewdataset">								
            "Objects": [                                          //       <ColumnInfo>								
              {                                                   //         <Column id="company" type="BLOB" size="80"/>								
                "tag": "Dataset",                                 //         <Column id="department" type="BLOB" size="80"/>								
                "attribute": {                                    //       </ColumnInfo>								
                  "id": "viewdataset"                             //       <Rows>								
                },                                                //         <Row/>								
                "Dataset": [                                      //       </Rows>								
                  {                                               //     </Dataset>								
                    "tag": "ColumnInfo",                          //   </Objects>								
                    "ColumnInfo": [								
                      {								
                        "tag": "Column",								
                        "attribute": {								
                          "id": "company",								
                          "type": "BLOB",								
                          "size": "80"								
                        }								
                      },								
                      {								
                        "tag": "Column",								
                        "attribute": {								
                          "id": "department",								
                          "type": "BLOB",								
                          "size": "80"								
                        }								
                      }								
                    ]								
                  },								
                  {								
                    "tag": "Rows",								
                    "Rows": [								
                      {								
                        "tag": "Row"								
                      }								
                    ]								
                  }								
                ]								
              }								
            ]								
          }								
        ],								
        "Bind": [								
        {                                                         //   <Bind>								
          "tag": "Bind",                                          //     <BindItem id="item0" compid="Combo00" propid="value" datasetid="viewdataset" columnid="company"/>								
          "Bind": [                                               //   </Bind>								
              {								
                "tag": "BindItem",								
                "attribute": {								
                  "id": "item0",								
                  "compid": "Combo00",								
                  "propid": "value",								
                  "datasetid": "viewdataset",								
                  "columnid": "company"								
                }								
              }								
            ]								
          }								
        ],								
        "Script": {                                               // <Script type="xscript5.1"><![CDATA[this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}; ] ]></Script>								
            "tag": "Script",								
            "attribute": {								
                "type": "xscript5.1"								
            },								
            "value": "this.btnAdd_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo) {}"								
        }								
    }								
}								
*============================================================================================*/								
								
/*---------------------------------------------------------------------------------------------*								
 * Function    : fn_GetViewGenerationResult								
 * Parameter   : 								
 *               - fieldarray     : model field list								
 *               - contents       : old contents (include <View>)								
 *               - generationattr : attributes for view generation								
 * Return      : View contents (source + script) (JSON format)								
                 ex) {								
                        "View": {								
                            "tag": "View",								
                            "attribute": {								
                                "id": "View00",								
                                "viewtype": "FreeForm",								
                                "taborder": "2",								
                                "text": "search view",								
                                "left": "0",								
                                ...								
                            },								
                            "Model": [								
                                {   // with field								
                                    "fieldid": "department",								
                                    "Components": [								
                                    ...								
                                    ]								
                                },								
                                {   // without field								
                                    "fieldid": "",								
                                    "Components": [								
                                    ...								
                                    ]								
                                }								
                            ],								
                            "InitValue": [								
                            ],								
                            "Objects": [								
                            ],								
                            "Bind": [								
                            ],								
                            "Script": {								
                                "tag": "Script",								
                                "attribute": {								
                                },								
                                "value": ""								
                            }								
                        }								
                    }								
 * Description : Generate the view based on the model field and return the results.								
 *---------------------------------------------------------------------------------------------*								
 *                            !!! This is a required function. !!!                             *								
 *                            !!! Do not delete it. !!!                                        *								
 *---------------------------------------------------------------------------------------------*/								
fn_GetViewGenerationResult = function(fieldarray, contents, generationattr) {								
								
	//Return Value							
    var vResult = "";								
								
    //trace(">> fieldarray : " + fieldarray);								
    //trace(">> contents : " + contents);								
    //trace(">> generationattr : " + generationattr);								
      								
	//Set Model Information as JSON Object							
    if(fieldarray)oFieldArray = JSON.parse(fieldarray);								
    								
	//Set View Component Information as JSON Object								
    if(contents)oContents = JSON.parse(contents);								
    								
	//Set Setting Information as JSON Object							
    if(generationattr)oGenerationAttr = JSON.parse(generationattr);								
    								
	//Model Information Initialization							
	oContents.View.Model = [];							
								
	//Load Model Information Generation Function							
	fn_GetModel();							
								
	//Convert View Component Information into String							
    vResult = JSON.stringify(oContents, null, "\t");								
    								
    //trace(">> vResult : " + vResult);								
	//Return View Component Information							
    return vResult;								
};								
								
/*---------------------------------------------------------------------------------------------*								
 * Function     : fn_GetViewAttributeList								
 * Return       : View generation attribute list (JSON format)								
                  ex)   {								
                        "attributecount": "2",								
                        "attributes": [								
                           {								
                                "id": "use_triggerbutton",								
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList								
                                "defaultvalue": "true",								
                                "description": "Specifies whether trigger button is auto-created or not"								
                            },								
                            {								
                                "id": "triggerbuttontext",								
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList								
                                "defaultvalue": "Search",								
                                "description": "Enter text for trigger button"								
                            }								
                        ]								
                    }								
 * Description : Obtain a list of custom attributes required for view generation								
 *---------------------------------------------------------------------------------------------*/								
fn_GetViewAttributeList = function() {								
								
    var strJson = "";								
    var oJson = {								
                        "attributecount": "4",								
                        "attributes": [								
							{	
								"id": "direction",
                                "edittype": "Enum",
								"enumlist" : ["horizontal", "vertical"],
                                "defaultvalue": "horizontal",								
                                "description": "Set the Component Production Direction."								
                            },								
							{	
                                "id": "halign",								
                                "edittype": "Enum",								
                                "defaultvalue": "left",								
								"enumlist" : ["left", "center", "right"],
                                "description": "Set the Field  Horizontal Alignment."								
                            },								
							{	
                                "id": "valign",								
                                "edittype": "Enum",								
                                "defaultvalue": "top",								
								"enumlist" : ["top", "middle", "bottom"],
                                "description": "Set the Field Vertical Alignment."								
                            },								
							{	
                                "id": "format",								
                                "edittype": "layout",								
								"defaultvalue": "",
								"description": "Set the View Layout"
                                								
                            }								
                        ]								
                  };								
				  				
	strJson = JSON.stringify(oJson, null, "\t");							
    return strJson;								
};								
								
/*---------------------------------------------------------------------------------------------*								
 * Function     : fn_GetFieldUserAttributeList								
 * Return       : user attribute list from model field(JSON format)								
                  ex)   {								
                        "attributecount": "2",								
                        "attributes": [								
                           {								
                                "id": "use_triggerbutton",								
                                "edittype": "Boolean",              // edittype : Boolean/String/Number/Enum/ViewObjList								
                                "defaultvalue": "true",								
                                "description": "Specifies whether trigger button is auto-created or not"								
                            },								
                            {								
                                "id": "triggerbuttontext",								
                                "edittype": "String",               // edittype : Boolean/String/Number/Enum/ViewObjList								
                                "defaultvalue": "Search",								
                                "description": "Enter text for trigger button"								
                            }								
                        ]								
                    }								
 * Description  : Obtain a list of user attributes to register in model field								
 *---------------------------------------------------------------------------------------------*/								
fn_GetFieldUserAttributeList = function (){								
    var strJson = "";								
    								
    var oJson = {								
                        "attributecount": "3",								
                        "attributes": [								
                            {								
                                "id": "fieldwidth",								
                                "edittype": "String",								
								"defaultvalue": FIELD_WIDTH,
                                "description": "Field Width(px or %)"								
                            },								
							{	
                                "id": "fieldheight",								
                                "edittype": "String",								
								"defaultvalue": FIELD_HEIGHT,
                                "description": "Field Height(px or %)"								
                            },								
							{	
                                "id": "cssclass",								
                                "edittype": "String",								
								"defaultvalue": COMP_CSSCLASS,
                                "description": "Component CSS Class"								
                            }								
                        ]								
                  };								
				  				
	strJson = JSON.stringify(oJson, null, "\t");							
    								
    return strJson;								
}								
								
/*---------------------------------------------------------------------------------------------*								
 * Function     : fn_GetModel								
 * Parameter    : 								
 * Return       :								
 * Description  : Function to generate a component source based on field information of the model entered by the user								
 *---------------------------------------------------------------------------------------------*/								
fn_GetModel = function(){								
    								
	//Import View Component Width Value							
	var nViewCompWidth = oContents.View.referenceinfo.realwidth;							
								
	//Import View Component Height Value							
	var nViewCompHeight = oContents.View.referenceinfo.realheight;							
								
	//If the format properties are set, produce components based on layout rules							
	if(oGenerationAttr.attributes.format)							
	{							
		//Import Layout Information						
		var oLayout = oGenerationAttr.attributes.format;						
								
		//Load Layout Calculation Function						
		fn_CalcLayout(oLayout, nViewCompWidth, nViewCompHeight);						
								
		//Load Layout-based Component Production Function						
		fn_MakeCompByLayout(oLayout);						
	}							
	//If the format properties are not set, create components based on basic rules							
	else							
	{							
		//Import Field Information						
		var arrFieldList = oFieldArray.fields;						
								
		//Import Component Production Direction Information						
		var sDirection = oGenerationAttr.attributes.direction;						
								
		//Import Component Horizontal Alignment Information						
		var sHAlign = oGenerationAttr.attributes.halign;						
								
		//Import Component Vertical Alignment Information						
		var sVAlign = oGenerationAttr.attributes.valign;						
								
		//Load Component Location Calculation Information						
		var arrFieldPosition = fn_CalcField(sDirection, sVAlign, sHAlign, nViewCompWidth, nViewCompHeight, false);						
								
		//Load Component Production Function						
		fn_MakeComp(0, 0, nViewCompWidth, nViewCompHeight, sDirection, arrFieldPosition, false, true);						
	}							
};								
								
/*---------------------------------------------------------------------------------------------*								
 * Function     : fn_CalcLayout								
 * Parameter    : 								
				- oLayout : Layout Setting Information
				- nViewCompWidth : View Component Real Width
				- nViewCompHeight : View Component Real Height
 * Return       : 								
 * Description  : Layout Calculation Information								
 *---------------------------------------------------------------------------------------------*/								
fn_CalcLayout = function(oLayout, nViewCompWidth, nViewCompHeight){								
								
	//CellList Information set on Layout							
	var arrCellList = oLayout.celllist;							
								
	//ColumnSize Information set on Layout							
	var arrColSize = oLayout.columnsize;							
								
	//RowSize Information set on Layout							
	var arrRowSize = oLayout.rowsize;							
								
	//CellList Quantity							
	var nCellCnt = arrCellList.length;							
								
	//The Sum of Column/Row Sizes that were not set as -1							
	var nAllColSize = 0;							
	var nAllRowSize = 0;							
								
	//Quantity of Column/Row Size set as -1							
	var nNoColSizeCnt = 0;							
	var nNoRowSizeCnt = 0;							
								
	//Replacement Size if Column/Row Size is -1							
	var nColSizeDef = 0;							
	var nRowSizeDef = 0 ;							
								
	var oCell;							
	var sDirection, sVAlign, sHAlign;							
	var nCol, nRow, nColSpan, nRowSpan;							
	var nColSize, nRowSize;							
								
	var oField;							
	var nFieldWidth;							
	var nFieldWidthType;							
	var nFiledWidthMax;							
	var nFieldHeight;							
	var nFieldHeightType;							
	var nFieldHeightMax;							
								
	//Evaluate Sum of Column Sizes that are not set as -1							
	nAllColSize = arrColSize.reduce(function (pre, value){							
		if(value==-1)return pre;						
		else return pre + value;						
	});							
								
	//Evaluate Sum of Row Sizes that are not set as -1							
	nAllRowSize = arrRowSize.reduce(function (pre, value){							
		if(value==-1)return pre;						
		else return pre + value;						
	});							
								
	if(nAllColSize==-1)nAllColSize = 0;							
								
	if(nAllRowSize==-1)nAllRowSize = 0;							
								
	//Evaluate Quantity of Column/Rows set as -1							
	nNoColSizeCnt = arrColSize.filter(arrColSize=>arrColSize==-1).length;							
	nNoRowSizeCnt = arrRowSize.filter(arrRowSize=>arrRowSize==-1).length;							
								
	//If there are Column/Rows set as -1							
	//(View Component Size -(The Sum of Column/Row Sizes not set at -1))/Number of Column/Rows set at -1							
	if(nNoColSizeCnt>0)nColSizeDef = (nViewCompWidth - nAllColSize)/nNoColSizeCnt;							
	if(nNoRowSizeCnt>0)nRowSizeDef = (nViewCompHeight - nAllRowSize)/nNoRowSizeCnt;							
								
	//Save Default Column/Row Size on Layout							
	oLayout.colsizedef = nColSizeDef;							
	oLayout.rowsizedef = nRowSizeDef;							
								
	//Evaluate the Field Location Value of each Cell							
	for(var i=0;i<nCellCnt;i++)							
	{							
		//Import Information set on Cell						
		oCell = arrCellList[i];						
		sDirection = oCell.direction;						
		sVAlign = oCell.valign;						
		sHAlign = oCell.halign;						
		nCol = nexacro.toNumber(oCell.col);						
		nRow = nexacro.toNumber(oCell.row);						
		nColSpan = nexacro.toNumber(oCell.colspan);						
		nRowSpan = nexacro.toNumber(oCell.rowspan);						
								
		//Initialize to 1 if there are no Col/RowSpan Values						
		if(!nColSpan)nColSpan = 1;						
		if(!nRowSpan)nRowSpan = 1;						
								
		//Evaluate the Width/Height of that Cell						
		nColSize = fn_GetCellSize(oLayout.columnsize, nCol, nColSpan, nColSizeDef);						
		nRowSize = fn_GetCellSize(oLayout.rowsize, nRow, nRowSpan, nRowSizeDef);						
								
		//Save the Width/Height Value on that Cell						
		oCell.realcolsize = nColSize;						
		oCell.realrowsize = nRowSize;						
								
		//If there are fields connected to that Cell						
		if(oCell.fieldlist)						
		{						
			//Evaluate the Field Location Value to input on that Cell					
			oCell.fieldposition = fn_CalcField(sDirection, sVAlign, sHAlign, nColSize, nRowSize, true, oCell.fieldlist);					
		}						
	}							
}								
								
								
/*---------------------------------------------------------------------------------------------*								
 * Function     : fn_CalcField								
 * Parameter    : 								
				- sDirection : Component Production Direction
				- sVAlign : Component Vertical Alignment Method(top|middle|bottom)				
				- sHAlign : Component Horizontal Alignment Method(left|center|right)				
				- nColSize : The Width of The Cell to be Expressed
				- nRowSize : The Height of The Cell to be Expressed
				- bUseLayout : Whether Layout was used
				- arrFieldInCellList : Field List connect to The Cell	
 * Return       : arrFieldPosition: Object Array with Field Location Information								
 * Description  : Function to Evaluate the Field Location Value to be Expressed								
 *---------------------------------------------------------------------------------------------*/								
fn_CalcField = function(sDirection, sVAlign, sHAlign, nColSize, nRowSize, bUseLayout, arrFieldInCellList)								
{								
	var nLeft = 0;							
	var nTop = 0;							
	var nRowIdx = 0;							
	var nColIdx = 0;							
	var nFiledWidthMax = 0;							
	var nFiledHeightMax = 0;							
								
	var nStartX, nStartY;							
	var nEndX, nEndX;							
	var nTemp;							
								
	//Import Field List Registered to the Model							
	var arrFieldList = oFieldArray.fields;							
								
	//Number of Fields connected to the Cell							
	var nFieldInCellCnt;							
								
	//Object Array to save the Field Location Information							
	var arrFieldPosition = [];							
								
	//If Layout was used, check the quantity via the field list connected to the cell							
	if(bUseLayout==true)nFieldInCellCnt = arrFieldInCellList.length;							
								
	//If Layout was not used, check the quantity through the number of field list registered to the model							
	else nFieldInCellCnt = arrFieldList.length;							
								
	//If the Component Production Direction is Horizontal							
	//Choose Array, as the x-coordinate for each row is different							
	//Choose Number, as the y-coordinate for each column is identical							
	if(sDirection=="horizontal")							
	{							
		var arrAlignX = [];						
		var nAlignY;						
	}							
	//If the Component Production Direction is Vertical 							
	//Choose Number, as the x-coordinate for each row is identical							
	//Choose Array, as the y-coordinate for each column is different							
	else							
	{							
		var nAlignX;						
		var arrAlignY = [];						
	}							
								
	for(var j=0;j<nFieldInCellCnt;j++)							
	{							
		//If Layout was used						
		//Import Field Information registered on the Model based on the Fields connected to the Cell						
		if(bUseLayout==true)						
		{						
			sFieldId =  arrFieldInCellList[j];					
			oField = arrFieldList.filter(arrFieldList=>arrFieldList.id==sFieldId)[0];					
		}						
		//If Layout was not used 						
		//Import Field Information registered on the Model						
		else						
		{						
			oField = arrFieldList[j];					
			sFieldId = oField.id;					
		}						
								
		//Evaluate the Width/Height Value where the Field will be expressed						
		nFieldWidth = fn_GetRealSize(oField.fieldwidth, nColSize, FIELD_WIDTH);						
		nFieldHeight = fn_GetRealSize(oField.fieldheight, nRowSize, FIELD_HEIGHT);						
								
		//If the Component Production Direction is Horizontal						
		if(sDirection=="horizontal")						
		{						
								
			//Calculate the difference arising from the conversion process from Padding to Comp/Line Space					
			if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Col", nColIdx+1, nColIdx);					
			else nTemp = 0;					
								
			//Start a new line if the Field exceeds the Cell Width					
			if(nLeft+nFieldWidth-nTemp>nColSize)					
			{					
				//The Right value of the Field located on the last Row				
				nEndX = nLeft;				
								
				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space				
				if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Col", nColIdx, nColIdx-1);				
				else nTemp = 0;				
								
				//Evaluate the HAlign Starting Value of this Row				
				arrAlignX[nRowIdx] = fn_CalcAlignPos(sHAlign, nColSize, (nEndX - nStartX - nTemp));				
								
				//Create the starting Left/Top Coordinates of the next Row				
				//Set the Bottom value of the Field with the largest Height of this Row as the Top value of the next Row				
				nTop += nFiledHeightMax;				
								
				//Initialize the Left Coordinate				
				nLeft = 0;				
								
				//Initialize the largest Height Value				
				nFiledHeightMax = 0;				
								
				//Initialize the Col Index				
				nColIdx = 0;				
								
				//Increase Row Index				
				nRowIdx++;				
								
			}					
								
			//Evaluate the largest Height Value					
			if(nFieldHeight>nFiledHeightMax)nFiledHeightMax = nFieldHeight;					
		}						
		//If the Component Production Direction is Vertical 						
		else						
		{						
			//Calculate the difference arising from the conversion process from Padding to Comp/Line Space					
			if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Row", nColIdx+1, nColIdx);					
			else nTemp = 0;					
								
			//Start a new line if the Field exceeds the Cell Height					
			if(nTop+nFieldHeight-nTemp>nRowSize)					
			{					
				//The Bottom Value of the last Field of this Row				
				nEndY = nTop;				
								
				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space				
				if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Row", nColIdx, nColIdx-1);				
				else nTemp = 0;				
								
				//Evaluate the VAlign Starting Location Value of this Row				
				arrAlignY[nRowIdx] = fn_CalcAlignPos(sVAlign, nRowSize, (nEndY - nStartY - nTemp));				
								
				//Create the starting Left/Top Coordinates of the next Row				
				//Set the right value of the field with the largest width of this row as the left value of the next Row				
				nLeft += nFiledWidthMax;				
								
				//Initialize Top Coordinate				
				nTop = 0;				
								
				//Initialize the largest Width Value				
				nFiledWidthMax = 0;				
								
				//Initialize the Col Index				
				nColIdx = 0;				
								
				//Increase Row Index				
				nRowIdx++;				
			}					
								
			//Evaluate the largest Width Value					
			if(nFieldWidth>nFiledWidthMax)nFiledWidthMax = nFieldWidth;					
		}						
								
		//Starting Left/Top Location Value of the Field						
		if(j==0)						
		{						
			nStartX = nLeft;					
			nStartY = nTop;					
		}						
								
		//If is it the last Field						
		if(j==nFieldInCellCnt-1)						
		{						
			//If the Component Production Direction is Horizontal					
			if(sDirection=="horizontal")					
			{					
				//The Right value of the Field located on the last Row				
				nEndX = nLeft + nFieldWidth;				
								
				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space				
				if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Col", nColIdx+1, nColIdx);				
				else nTemp = 0;				
								
				//Evaluate the HAlign Starting Value of this Row				
				arrAlignX[nRowIdx] = fn_CalcAlignPos(sHAlign, nColSize, (nEndX - nStartX - nTemp));				
								
				//The Bottom Value of the Field with the largest Height until the last Field				
				nEndY = nTop + nFiledHeightMax;				
								
				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space				
				if(nRowIdx!=0)nTemp = fn_CalcPaddingToSpace("Row", nRowIdx+1, nRowIdx);				
				else nTemp = 0;				
								
				//Evaluate the VAlign Starting Location Value				
				nAlignY = fn_CalcAlignPos(sVAlign, nRowSize, (nEndY - nStartY - nTemp));				
			}					
			//If the Component Production Direction is Vertical 					
			else					
			{					
				//The Bottom Value of the last Field of this Row 				
				nEndY = nTop+nFieldHeight;				
								
				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space				
				if(nColIdx!=0)nTemp = fn_CalcPaddingToSpace("Row", nColIdx+1, nColIdx);				
				else nTemp = 0;				
								
				//Evaluate the HAlign Starting Value of this Row				
				arrAlignY[nRowIdx] = fn_CalcAlignPos(sVAlign, nRowSize, (nEndY - nStartY - nTemp));				
								
				//The Right Value of the Field with the largest Height until the last Field				
				nEndX = nLeft + nFiledWidthMax;				
								
				//Calculate the difference arising from the conversion process from Padding to Comp/Line Space				
				if(nRowIdx!=0)nTemp = fn_CalcPaddingToSpace("Col", nRowIdx+1, nRowIdx);				
				else nTemp = 0;				
								
				//Evaluate the HAlign Starting Value of this Row				
				nAlignX = fn_CalcAlignPos(sHAlign, nColSize, (nEndX - nStartX - nTemp));				
			}					
		}						
								
		//Save the Field Location Information						
		arrFieldPosition[j] = 						
		{						
			"fieldid" : sFieldId,
			"left" : nLeft,
			"top" : nTop,
			"width" : nFieldWidth,
			"height" : nFieldHeight,
			"rowidx" : nRowIdx,
			"colidx" : nColIdx,
			"alignx" : 0,
			"aligny" : 0			
		};						
								
		//Set the Left/Top Location Value of the next Field						
		if(sDirection=="horizontal")nLeft += nFieldWidth;						
		else nTop += nFieldHeight;						
								
		//Increase Col Index						
		nColIdx++;						
	}							
								
	//Save Align X/Y Value on the Field Location Information							
	if(sDirection=="horizontal")							
	{							
		for(var i=0;i<arrFieldPosition.length;i++)						
		{						
			nRowIdx = arrFieldPosition[i].rowidx;					
			arrFieldPosition[i].alignx = arrAlignX[nRowIdx];					
			arrFieldPosition[i].aligny = nAlignY;					
		}						
	}else							
	{							
		for(var i=0;i<arrFieldPosition.length;i++)						
		{						
			nRowIdx = arrFieldPosition[i].rowidx;					
			arrFieldPosition[i].alignx = nAlignX;					
			arrFieldPosition[i].aligny = arrAlignY[nRowIdx];					
		}						
	}							
								
	//Return Field Location Information							
	return arrFieldPosition;							
}								
								
/*---------------------------------------------------------------------------------------------*								
 * Function     : fn_MakeCompByLayout								
 * Parameter    : 								
				- oLayout : Layout Setting Information
 * Return       : 								
 * Description  : Layout-based Component Production Function								
 *---------------------------------------------------------------------------------------------*/								
fn_MakeCompByLayout = function(oLayout)								
{								
	//CellList Information set on Layout							
	var arrCellList = oLayout.celllist;							
								
	//ColumnSize Information set on Layout							
	var arrColSize = oLayout.columnsize;							
								
	//RowSize Information set on Layout							
	var arrRowSize = oLayout.rowsize;							
								
	//Import Column/Row Default Size							
	var nColSizeDef = oLayout.colsizedef;							
	var nRowSizeDef = oLayout.rowsizedef;							
								
	var nCol, nRow, nColSpan, nRowSpan;							
	var sDirection, sVAlign, sHAlign;							
	var nWidth;							
	var nHeight;							
								
	var oCell;							
	var oStatic;							
								
	for(var i=0;i<arrCellList.length;i++)							
	{							
		oCell = arrCellList[i];						
		sDirection = oCell.direction						
		nCol = nexacro.toNumber(oCell.col);						
		nRow = nexacro.toNumber(oCell.row);						
		nColSpan = nexacro.toNumber(oCell.colspan);						
		nRowSpan = nexacro.toNumber(oCell.rowspan);						
								
		//Initialize to 1 if there are no Col/RowSpan Values						
		if(!nColSpan)nColSpan = 1;						
		if(!nRowSpan)nRowSpan = 1;						
								
		//Continue if there are no Fields on the Cell						
		if(!oCell.fieldlist)continue;						
								
		//Import the Left/Top Location Value of the current Cell						
		nLeft = fn_GetCellSize(arrColSize, 0, nCol, nColSizeDef);						
		nTop = fn_GetCellSize(arrRowSize, 0, nRow, nColSizeDef);						
								
		//Load Component Tag Production Function						
		fn_MakeComp(nLeft, nTop, oCell.realcolsize, oCell.realrowsize, sDirection, oCell.fieldposition, true);						
	}							
}								
								
/*---------------------------------------------------------------------------------------------*								
 * Function     : fn_MakeComp								
 * Parameter    : 								
				- nBaseLeft : Reference Coordinate (Left) to create Component
				- nBaseTop : Reference Coordinate (Top) to create Component
				- nBaseWidth : Reference Coordinate (Width) to create Component
				- nBaseHeight : Reference Coordinate (Height) to create Component
				- sDirection : Component Production Direction
				- arrFieldPosition: Object Array with Field Location Information
				- bUseLayout : Whether Layout was used
 * Return       : 								
 * Description  : Component Tag Production Function								
 *---------------------------------------------------------------------------------------------*/								
fn_MakeComp = function(nBaseLeft, nBaseTop, nBaseWidth, nBaseHeight, sDirection, arrFieldPosition, bUseLayout)								
{								
	var nCompLeft, nCompTop, nCompWidth, nCompHeight;							
	var nPosLeft, nPosTop, nPosWidth, nPosHeight;							
								
	var oAlignPos;							
	var sFieldId;							
	var oField;							
	var oFieldPosition;							
	var nRowIdx, nColIdx;							
	var nAlignX, nAlignY;							
								
	var oModel = oContents.View.Model;							
	var sCompId;							
	var oCompClass;							
								
	var sLabel;							
	var sClssClass;							
								
	if(!bUseLayout)bUseLayout = false;							
								
	for(var i=0;i<arrFieldPosition.length;i++)							
	{							
		//Import Field Object						
		oFieldPosition = arrFieldPosition[i];						
		sFieldId = oFieldPosition.fieldid;						
		oField = oFieldArray.fields.filter(fields=>fields.id==sFieldId)[0];						
								
		//Import Component Naming Rule Information						
		oCompClass = fn_GetCompClass();						
								
		//Import Row/Col Index where the Field will be located						
		nRowIdx = oFieldPosition.rowidx;						
		nColIdx = oFieldPosition.colidx;						
								
		//Import Align Location Information of the Field						
		nAlignX = oFieldPosition.alignx;						
		nAlignY = oFieldPosition.aligny;						
								
		//Import Field Location Information						
		nPosLeft = nexacro.toNumber(oFieldPosition.left);						
		nPosTop = nexacro.toNumber(oFieldPosition.top);						
		nPosWidth = nexacro.toNumber(oFieldPosition.width);						
		nPosHeight = nexacro.toNumber(oFieldPosition.height);						
								
		//Import Field Label Information						
		sLabel = oField.label;						
								
		//Import Field CSSCLASS Information						
		sCssClass = oField.cssclass;						
								
		//Calculate Left/Top Coordinate where Component will be located						
		//Evaluate actual Component Location Information reflecting Align, Padding, Comp/Line Space, etc.						
		//Component Left Coordinate = Cell Left + Field Left + Label Area Width + HAlign Starting Coordinate						
		nCompLeft = nBaseLeft + nPosLeft + nAlignX;						
								
		//Component Top Coordinate = Cell Top + Field Top + VAlign Starting Coordinate						
		nCompTop = nBaseTop + nPosTop + nAlignY;						
								
		if(sDirection=="horizontal")						
		{						
			if(nColIdx!=0)					
			{					
				//Component Left Coordinate = Component Left Coordinate - (Padding Value excluding the Left Padding of the first Component) + (Comp Space*Number of Components)				
				nCompLeft = nCompLeft - (COMP_PADDING_LEFT*nColIdx) - (COMP_PADDING_RIGHT*(nColIdx-1)) + (COMP_SPACE *nColIdx);				
			}else					
			{					
				//Component Left Coordinate = Component Left Coordinate + Component Left Padding				
				nCompLeft = nCompLeft + COMP_PADDING_LEFT;				
			}					
								
								
			if(nRowIdx!=0)					
			{					
				//Component Top Coordinate = Component Top Coordinate - (Padding Value excluding the Top Padding of the first Component) + (Line Space*Number of Components)				
				nCompTop = nCompTop - (COMP_PADDING_TOP*(nRowIdx-1)) - (COMP_PADDING_BOTTOM*nRowIdx) + (LINE_SPACE *nRowIdx);				
			}else					
			{					
				//Component Top Coordinate = Component Top Coordinate + Component Top Padding				
				nCompTop = nCompTop + COMP_PADDING_TOP;				
			}					
		}else						
		{						
			if(nRowIdx!=0)					
			{					
				//Component Left Coordinate = Component Left Coordinate - (Padding Value excluding the Left Padding of the first Component) + (Comp Space*Number of Components)				
				nCompLeft = nCompLeft - (COMP_PADDING_LEFT*nRowIdx) - (COMP_PADDING_RIGHT*(nRowIdx-1)) + (COMP_SPACE *nRowIdx);				
			}else					
			{					
				//Component Left Coordinate = Component Left Coordinate + Component Left Padding				
				nCompLeft = nCompLeft + COMP_PADDING_LEFT;				
			}					
								
			if(nColIdx!=0)					
			{					
				//Component Top Coordinate = Component Top Coordinate - (Padding Value excluding the Top Padding of the first Component) + (Line Space*Number of Components)				
				nCompTop = nCompTop - (COMP_PADDING_TOP*(nColIdx-1)) - (COMP_PADDING_BOTTOM*nColIdx) + (LINE_SPACE *nColIdx);				
			}else					
			{					
				//Component Top Coordinate = Component Top Coordinate + Component Top Padding				
				nCompTop = nCompTop + COMP_PADDING_TOP;				
			}					
		}						
								
		//Component Width = Field Width - Left/Right Padding						
		nCompWidth = nPosWidth - COMP_PADDING_LEFT - COMP_PADDING_RIGHT;						
								
		//Component Height = Field Height - Top/Bottom Padding						
		nCompHeight = nPosHeight - COMP_PADDING_TOP - COMP_PADDING_BOTTOM;						
								
		//Add Component Tag						
		oModel[oModel.length] = {"fieldid" : sFieldId,"Components" : []};						
		sCompId = fn_GetCompId(oCompClass.prefix+sFieldId);						
		oComp =	{
					"tag" : oCompClass.classId,
					"attribute" :
					{
						"id" : sCompId, "left" : nCompLeft, "top" : nCompTop, "width" : nCompWidth, "height" : nCompHeight, "text" : sLabel, "cssclass" : sCssClass
					}
				};			
								
		oModel[oModel.length-1].Components.push(oComp);						
	}							
}								
								
/*---------------------------------------------------------------------------------------------*								
 * Function     : fn_GetCompId								
 * Parameter    : 
				- sCompId : Component ID to be created
 * Return       : sRtnCompId : Component ID								
 * Description  : Component ID Production Function								
 *---------------------------------------------------------------------------------------------*/								
fn_GetCompId = function(sCompId)								
{								
	//Check if there is a Component produced in the same Field							
	var arrTemp = arrCompIds.filter(arrCompIds=>arrCompIds.indexOf(sCompId)==0);							
	var sRtnCompId;							
								
	//If there is a Component produced in the same Field							
	if(arrTemp.length>0)sRtnCompId = sCompId+"_"+arrTemp.length;							
								
	//If there isn't a Component produced in the same Field							
	else sRtnCompId = sCompId;							
								
	//Add Component ID Management to Array							
	arrCompIds[arrCompIds.length] = sRtnCompId;							
								
	//Return Component ID							
	return sRtnCompId;							
}								
								
/*---------------------------------------------------------------------------------------------*								
 * Function     : fn_GetRealSize								
 * Parameter    : 								
				- sSize : Size Information(% or px)				
				- nParentSize : Size Information of Parent Area
				- sDefSize : Default Size Information
								
 * Return       : nRealSize : px standard Size								
 * Description  : Function to Evaluate actual usage size based on the registered size								
 *---------------------------------------------------------------------------------------------*/								
fn_GetRealSize = function(sSize, nParentSize, sDefSize)								
{								
	var nRealSize;							
	var nSizeType;							
								
	if(!sSize)sSize = sDefSize;							
								
	nSizeType = sSize.replace(/[0-9]/g, "");							
								
	if(nSizeType=="%")							
	{							
		nRealSize = nexacro.toNumber(sSize.replace(/[^0-9]/g, ""));						
		nRealSize = (nRealSize/100) * nParentSize;						
	}else							
	{							
		nRealSize = nexacro.toNumber(sSize.replace(/[^0-9]/g, ""));						
	}							
								
	return nRealSize;							
}								
								
/*---------------------------------------------------------------------------------------------*								
 * Function     : fn_GetCellSize								
 * Parameter    : 								
				- arrList : columnsize or rowsize Size Information(% or px)
				- nIdx : Starting Column/Row Index Information
				- nSpan : Column/Row Span Information	
				- nDefSize : Default Size Information to use if -1				
								
 * Return       : nSize : px standard Size								
 * Description  : Cell Width/Height Evaluation Function								
 *---------------------------------------------------------------------------------------------*/								
fn_GetCellSize = function(arrList, nIdx, nSpan, nDefSize)								
{								
	var nSize = 0;							
								
	for(var i=nIdx; i<nIdx+nSpan; i++)							
	{							
		if(nexacro.toNumber(arrList[i])==-1)						
		{						
			nSize += nexacro.toNumber(nDefSize);					
		}else						
		{						
			nSize += nexacro.toNumber(arrList[i]);					
		}						
	}							
								
	return nSize;							
}								
								
/*---------------------------------------------------------------------------------------------*								
 * Function     : fn_CalcPaddingToSpace								
 * Parameter    : 
				- sType : Col or Row	
                - nIdx1 : Component Index Value to Calculate Padding
                - nIdx2 : Component Index Value to Calculate Padding + Space
 * Return       : nTemp : Calibrated px value								
 * Description  : If the interval value set as padding is converted to Padding + CompSpace or LineSpace								
                  Function to evaluate px value that needs calibration								
 *---------------------------------------------------------------------------------------------*/								
fn_CalcPaddingToSpace = function(sType, nIdx1, nIdx2)								
{								
	var nTemp;							
								
	//Formula to calibrate the location as the gap between components is calculated with Comp/Line Space instead of Padding information							
	//Component Padding Formula = (Component Left/Right Padding * Component number)							
	//Component Space Formula = (Left/Top Padding of the First Component + Right/Bottom Padding of Last Component + Space * Component number)							
	//Calculate difference = Component Padding Formula - Component Space Formula							
	if(sType=="Col")							
	{							
		nTemp = ((COMP_PADDING_LEFT+COMP_PADDING_RIGHT) * nIdx1) - (COMP_PADDING_LEFT + COMP_PADDING_RIGHT + (COMP_SPACE * nIdx2));						
	}else							
	{							
		nTemp = ((COMP_PADDING_TOP+COMP_PADDING_BOTTOM) * nIdx1) - (COMP_PADDING_TOP + COMP_PADDING_BOTTOM + (LINE_SPACE * nIdx2));						
	}							
								
	return nTemp							
}								
								
/*---------------------------------------------------------------------------------------------*								
 * Function     : fn_CalcAlignPos								
 * Parameter    : 								
				- sAlign : Component Alignment Method
                - nParentSize : Size of Parent Area
                - nSize : Size of Component Area			
 * Return       : nRtnValue : px value of Starting Location								
 * Description  : Evaluate the Align Starting Location Value of the Row/Col								
 *---------------------------------------------------------------------------------------------*/								
fn_CalcAlignPos = function(sAlign, nParentSize, nSize)								
{								
	var nRtnValue;							
								
	if(sAlign=="center"||sAlign=="middle")nRtnValue = (nParentSize - nSize)/2;							
	else if(sAlign=="right"||sAlign=="bottom")nRtnValue = nParentSize - nSize;							
	else nRtnValue = 0;							
								
	if(nRtnValue<0)nRtnValue = 0;							
								
	return nRtnValue;							
}								
								
/*---------------------------------------------------------------------------------------------*								
 * Function     : fn_GetCompClass								
 * Parameter    : 								
 * Return       : component class data								
 * Description  : Returns class information of the component based on Field data								
 *---------------------------------------------------------------------------------------------*/								
fn_GetCompClass = function()								
{								
	var oCompClass = { "classId" : "Button", "prefix" : "btn" };							
								
    //Return Component Information								
    return oCompClass;								
}]]></Script>
</ViewTemplateInfo>
